const { Scenes } = require('telegraf');
const validators = require('../utils/validators');
const { mainMenu, preferencesKeyboard } = require('../utils/keyboards');
const db = require('../database');

const editProfileScene = new Scenes.WizardScene(
    'edit_profile',
    async (ctx) => {
        const user = await db.getUserProfile(ctx.from.id);
        if (!user) {
            await ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return ctx.scene.leave();
        }

        await ctx.reply('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ò–º—è ‚úèÔ∏è', callback_data: 'edit_name' }],
                    [{ text: '–í–æ–∑—Ä–∞—Å—Ç üéÇ', callback_data: 'edit_age' }],
                    [{ text: '–ì–æ—Ä–æ–¥ üåÜ', callback_data: 'edit_city' }],
                    [{ text: '–ü–æ–ª üöª', callback_data: 'edit_gender' }],
                    [{ text: '–û–ø–∏—Å–∞–Ω–∏–µ üìù', callback_data: 'edit_description' }],
                    [{ text: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üì∏', callback_data: 'edit_photos' }],
                    [{ text: '–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è ‚ù§Ô∏è', callback_data: 'edit_preferences' }],
                    [{ text: '–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data: 'cancel_edit' }]
                ]
            }
        });
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (!ctx.callbackQuery) return;

        const action = ctx.callbackQuery.data;
        ctx.wizard.state.editField = action;

        if (action === 'cancel_edit') {
            await ctx.reply('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', mainMenu);
            return ctx.scene.leave();
        }

        switch (action) {
            case 'edit_name':
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, 2-30 —Å–∏–º–≤–æ–ª–æ–≤):');
                break;
            case 'edit_age':
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (14-99):');
                break;
            case 'edit_city':
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ (2-50 —Å–∏–º–≤–æ–ª–æ–≤):');
                break;
            case 'edit_gender':
                await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ú—É–∂—Å–∫–æ–π', callback_data: 'pref_male' }],
                            [{ text: '–ñ–µ–Ω—Å–∫–∏–π', callback_data: 'pref_female' }],
                            [{ text: '–õ—é–±–æ–π', callback_data: 'pref_any' }]
                        ]
                    }
                });
                break;
            case 'edit_preferences':
                await ctx.reply('–ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?', preferencesKeyboard);
                break;
            case 'edit_description':
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"', {
                    reply_markup: {
                        inline_keyboard: [[
                            { text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_description' }
                        ]]
                    }
                });
                break;
            case 'edit_photos':
                ctx.wizard.state.photos = [];
                await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –°—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ –±—É–¥–∫—Ç –∑–∞–º–µ–Ω–µ–Ω–æ.');
                break;
        }
        return ctx.wizard.next();
    },
    
    async (ctx) => {
        const editField = ctx.wizard.state.editField;

        try {
            switch (editField) {
                case 'edit_name':
                    const name = ctx.message.text.trim();
                    if (!validators.name(name)) {
                        await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                        return;
                    }
                    await db.updateUserField(ctx.from.id, 'name', name);
                    break;

                case 'edit_age':
                    if (!validators.age(ctx.message.text)) {
                        await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                        return;
                    }
                    await db.updateUserField(ctx.from.id, 'age', parseInt(ctx.message.text));
                    break;

                case 'edit_city':
                    const city = ctx.message.text.trim();
                    if (!validators.city(city)) {
                        await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                        return;
                    }
                    await db.updateUserField(ctx.from.id, 'city', city);
                    break;

                case 'edit_gender':
                    if (!ctx.callbackQuery || !['pref_male', 'pref_female', 'pref_any'].includes(ctx.callbackQuery.data)) {
                        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ');
                        return;
                    }
                    const gender = ctx.callbackQuery.data === 'pref_male' ? 'male' : 
                                   ctx.callbackQuery.data === 'pref_female' ? 'female' : 'any';
                    await db.updateUserField(ctx.from.id, 'gender', gender);
                    break;

                case 'edit_preferences':
                    if (!ctx.callbackQuery || !['pref_male', 'pref_female', 'pref_any'].includes(ctx.callbackQuery.data)) {
                        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ');
                        return;
                    }
                    const preferences = ctx.callbackQuery.data === 'pref_male' ? 'male' : 
                                       ctx.callbackQuery.data === 'pref_female' ? 'female' : 'any';
                    await db.updateUserField(ctx.from.id, 'preferences', preferences);
                    break;

                case 'edit_description':
                    if (ctx.callbackQuery?.data === 'skip_description') {
                        await db.updateUserField(ctx.from.id, 'description', '');
                    } else {
                        const description = ctx.message.text.trim();
                        if (!validators.description(description)) {
                            await ctx.reply('–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                            return;
                        }
                        await db.updateUserField(ctx.from.id, 'description', description);
                    }
                    break;

                case 'edit_photos':
                    if (!ctx.message?.photo) {
                        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é');
                        return;
                    }
                    
                    const photo = ctx.message.photo[ctx.message.photo.length - 1];
                    if (!validators.photo(photo)) {
                        await ctx.reply('–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 5MB');
                        return;
                    }
                    
                    ctx.wizard.state.photos = [photo.file_id];
                    await db.updateUserPhotos(ctx.from.id, ctx.wizard.state.photos);
                    await ctx.reply('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', mainMenu);
                    return ctx.scene.leave();
                    break;
            }

            await ctx.reply('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', mainMenu);
            return ctx.scene.leave();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return ctx.scene.leave();
        }
    }
);

module.exports = editProfileScene; 