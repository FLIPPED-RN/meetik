const { Telegraf, Scenes, session } = require('telegraf');
const config = require('../config');
const commands = require('./commands');
const middleware = require('./middleware');
const { registrationScene, editProfileScene } = require('../scenes');
const { mainMenu } = require('../utils/keyboards');
const db = require('../database');

const bot = new Telegraf(config.BOT_TOKEN);

// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ü–µ–Ω
const stage = new Scenes.Stage([registrationScene, editProfileScene]);

// Middleware
bot.use(session());
bot.use(stage.middleware());
bot.use(middleware.errorHandler);
bot.use(middleware.userCheck);
bot.use(middleware.rateLimit);

// –ö–æ–º–∞–Ω–¥—ã
bot.command('start', commands.startCommand);
bot.command('global', commands.globalRatingCommand);
bot.hears('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', commands.profileCommand);
bot.hears('üîç –ù–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å', commands.startRatingCommand);
bot.hears('üëë –õ–∏–¥–µ—Ä—ã', commands.leadersCommand);
bot.hears('‚≠êÔ∏è –ö—Ç–æ –º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª', commands.whoRatedMeCommand);
bot.hears('üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥', commands.globalRatingCommand);
bot.hears('üí∞ –ë–∞–ª–∞–Ω—Å', commands.balanceCommand);

bot.action('edit_profile', async (ctx) => {
    await ctx.scene.enter('edit_profile');
});

bot.action(/^rate_(\d+)_(\d+)$/, async (ctx) => {
    try {
        const [, targetId, rating] = ctx.match.map(Number);
        const result = await db.saveRating(targetId, ctx.from.id, rating);
        
        await ctx.answerCbQuery('–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
        
        if (result?.isMutualHigh) {
            const targetUser = await db.getUserProfile(targetId);
            await ctx.reply(`üéâ –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!\n` +
                          `${targetUser.name} —Ç–æ–∂–µ –≤—ã—Å–æ–∫–æ –æ—Ü–µ–Ω–∏–ª(–∞) –≤–∞—Å!\n` +
                          `${targetUser.username ? `Telegram: @${targetUser.username}` : ''}`);
        }
        
        const nextProfile = await db.getNextProfile(ctx.from.id);
        if (nextProfile) {
            await sendProfileForRating(ctx, nextProfile);
        } else {
            await ctx.reply('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ!', mainMenu);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏');
    }
});

bot.action('skip_profile', async (ctx) => {
    try {
        const nextProfile = await db.getNextProfile(ctx.from.id);
        if (nextProfile) {
            await sendProfileForRating(ctx, nextProfile);
        } else {
            await ctx.reply('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ!', mainMenu);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

async function sendProfileForRating(ctx, profile) {
    const ratingKeyboard = {
        inline_keyboard: [
            Array.from({ length: 5 }, (_, i) => ({
                text: `${i + 1}‚≠êÔ∏è`,
                callback_data: `rate_${profile.user_id}_${i + 1}`
            })),
            Array.from({ length: 5 }, (_, i) => ({
                text: `${i + 6}‚≠êÔ∏è`,
                callback_data: `rate_${profile.user_id}_${i + 6}`
            })),
            [{ text: '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_profile' }]
        ]
    };

    const caption = `üë§ *${profile.name}*, ${profile.age}\n` +
                   `üåÜ ${profile.city}\n` +
                   `${profile.description ? `üìù ${profile.description}\n` : ''}`;

    if (profile.photos && profile.photos.length > 0) {
        await ctx.replyWithPhoto(profile.photos[0], {
            caption: caption,
            parse_mode: 'Markdown',
            reply_markup: ratingKeyboard
        });
    } else {
        await ctx.reply(caption, {
            parse_mode: 'Markdown',
            reply_markup: ratingKeyboard
        });
    }
}

async function startBot() {
    try {
        await bot.launch();
        console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
        
        setInterval(async () => {
            try {
                const winners = await db.updateWinners();
                if (winners && winners.length > 0) {
                    for (const winner of winners) {
                        if (winner.coins_won > 0) {
                            try {
                                await bot.telegram.sendMessage(
                                    winner.user_id,
                                    `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–Ω—è–ª–∏ ${winner.place} –º–µ—Å—Ç–æ –∏ –ø–æ–ª—É—á–∏–ª–∏ ${winner.coins_won} –º–æ–Ω–µ—Ç!`
                                );
                            } catch (error) {
                                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${winner.user_id}:`, error);
                            }
                        }
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:', error);
            }
        }, 10000);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        setInterval(async () => {
            const participantsCount = await db.getGlobalRatingParticipantsCount();
            if (participantsCount >= 10) {
                await notifyParticipantsReady();
            }
        }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
    }
}

async function notifyParticipantsReady() {
    const users = await db.getAllUsers();
    const message = `üéâ –í—Å–µ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã!`;

    for (const user of users) {
        try {
            await bot.telegram.sendMessage(user.user_id, message, {
                parse_mode: 'Markdown'
            });
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error);
        }
    }
}

async function announceGlobalRating(bot) {
    try {
        const users = await db.getAllUsers();
        const message = `üåü *–í–Ω–∏–º–∞–Ω–∏–µ! –ù–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏!*\n\n` +
                       `üéØ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: 50 –º–æ–Ω–µ—Ç\n` +
                       `üéØ –£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å:\n` +
                       `üëë –ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ - 500 –º–æ–Ω–µ—Ç\n` +
                       `ü•à –í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ - 300 –º–æ–Ω–µ—Ç\n` +
                       `ü•â –¢—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ - 100 –º–æ–Ω–µ—Ç\n\n` +
                       `–ù–∞–∂–º–∏—Ç–µ /global –∏–ª–∏ –∫–Ω–æ–ø–∫—É "üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥" —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!`;

        for (const user of users) {
            try {
                await bot.telegram.sendMessage(user.user_id, message, {
                    parse_mode: 'Markdown'
                });
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error);
            }
            await new Promise(resolve => setTimeout(resolve, 50));
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
    }
}

setInterval(async () => {
    try {
        const currentRound = await db.getCurrentGlobalRound();
        if (!currentRound || new Date(currentRound.rating_end_time) <= new Date()) {
            const winners = await db.finishGlobalRound();
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º
            for (let i = 0; i < Math.min(3, winners.length); i++) {
                const winner = winners[i];
                const coins = i === 0 ? 500 : i === 1 ? 300 : i === 2 ? 100 : 0;
                await bot.telegram.sendMessage(
                    winner.user_id,
                    `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–Ω—è–ª–∏ ${i + 1} –º–µ—Å—Ç–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ ${coins} –º–æ–Ω–µ—Ç!`
                );
            }
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ø-10 –∞–Ω–∫–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            const topProfiles = await db.getTopProfiles();
            for (const user of await db.getAllUsers()) {
                await bot.telegram.sendMessage(user.user_id, `üèÜ –¢–æ–ø-10 –∞–Ω–∫–µ—Ç:\n${topProfiles.map(p => `${p.name}: ${p.average_rating}`).join('\n')}`);
            }
            await db.createGlobalRound();
            await announceGlobalRating(bot);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞:', error);
    }
}, 30 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
bot.command('startglobalround', async (ctx) => {
    if (ctx.from.id === config.ADMIN_ID) { // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å ADMIN_ID –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        try {
            await db.createGlobalRound();
            await announceGlobalRating(bot);
            await ctx.reply('–ù–æ–≤—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞');
        }
    }
});

bot.action('join_global', async (ctx) => {
    await startGlobalRating(ctx);
});

bot.action('view_global_profiles', async (ctx) => {
    try {
        const profiles = await db.getGlobalRatingParticipants();
        const currentProfile = profiles[0]; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å

        if (!currentProfile) {
            await ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏.');
            return;
        }

        const keyboard = {
            inline_keyboard: [
                [
                    { text: '‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è', callback_data: `vote_global_${currentProfile.user_id}` },
                    { text: '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è', callback_data: 'next_global_profile' }
                ]
            ]
        };

        const caption = `üë§ *${currentProfile.name}*, ${currentProfile.age}\n` +
                       `üåÜ ${currentProfile.city}\n` +
                       `${currentProfile.description ? `üìù ${currentProfile.description}\n` : ''}`;

        if (currentProfile.photos && currentProfile.photos.length > 0) {
            await ctx.replyWithPhoto(currentProfile.photos[0], {
                caption: caption,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } else {
            await ctx.reply(caption, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–Ω–∫–µ—Ç:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç.');
    }
});

bot.action(/^vote_global_(\d+)$/, async (ctx) => {
    try {
        const targetId = parseInt(ctx.match[1]);
        const voterId = ctx.from.id;

        if (voterId === targetId) {
            await ctx.answerCbQuery('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è!');
            return;
        }

        await db.saveGlobalVote(voterId, targetId);
        await ctx.answerCbQuery('–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        await showNextGlobalProfile(ctx);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏');
    }
});

bot.action('next_global_profile', async (ctx) => {
    try {
        await showNextGlobalProfile(ctx);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –î–æ–±–∞–≤—å—Ç–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
async function showNextGlobalProfile(ctx) {
    const voterId = ctx.from.id;
    const profiles = await db.getGlobalRatingParticipants(voterId);
    
    if (!profiles || profiles.length === 0) {
        await ctx.reply('–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã.');
        return;
    }

    const currentProfile = profiles[0];
    const keyboard = {
        inline_keyboard: [
            [
                { text: '‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è', callback_data: `vote_global_${currentProfile.user_id}` },
                { text: '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è', callback_data: 'next_global_profile' }
            ]
        ]
    };

    const caption = `üë§ *${currentProfile.name}*, ${currentProfile.age}\n` +
                   `üåÜ ${currentProfile.city}\n` +
                   `${currentProfile.description ? `üìù ${currentProfile.description}\n` : ''}`;

    try {
        await ctx.editMessageCaption(caption, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    } catch (error) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if (currentProfile.photos && currentProfile.photos.length > 0) {
            await ctx.replyWithPhoto(currentProfile.photos[0], {
                caption: caption,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } else {
            await ctx.reply(caption, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
    }
}

bot.action('vote_profile', async (ctx) => {
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∞–Ω–∫–µ—Ç—É
    const targetId = ctx.wizard.state.currentProfile.user_id;
    await db.saveGlobalVote(ctx.from.id, targetId);
    await ctx.answerCbQuery('–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!');

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é
    await showNextGlobalProfile(ctx);
});

module.exports = {
    bot,
    startBot
};