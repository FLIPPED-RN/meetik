const { Telegraf, Scenes, session } = require('telegraf');
const config = require('../config');
const commands = require('./commands');
const middleware = require('./middleware');
const { registrationScene, editProfileScene } = require('../scenes');
const { mainMenu } = require('../utils/keyboards');
const db = require('../database');

const bot = new Telegraf(config.BOT_TOKEN);
const stage = new Scenes.Stage([registrationScene, editProfileScene]);

bot.use(session());
bot.use(stage.middleware());
bot.use(middleware.errorHandler);
bot.use(middleware.userCheck);
bot.use(middleware.rateLimit);

bot.command('start', commands.startCommand);
bot.command('global', commands.globalRatingCommand);
bot.hears('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', commands.profileCommand);
bot.hears('üîç –ù–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å', commands.startRatingCommand);
bot.hears('üëë –õ–∏–¥–µ—Ä—ã', commands.leadersCommand);
bot.hears('‚≠êÔ∏è –ö—Ç–æ –º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª', commands.whoRatedMeCommand(bot));
bot.hears('üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥', commands.globalRatingCommand);
bot.hears('üí∞ –ë–∞–ª–∞–Ω—Å', commands.balanceCommand);

bot.action('edit_profile', async (ctx) => {
    await ctx.scene.enter('edit_profile');
});

commands.registerBotActions(bot);

async function startBot() {
    try {
        await bot.launch();
        console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
        
        setInterval(async () => {
            try {
                const winners = await db.updateWinners();
                if (winners && winners.length > 0) {
                    for (const winner of winners) {
                        if (winner.coins_won > 0) {
                            try {
                                await bot.telegram.sendMessage(
                                    winner.user_id,
                                    `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–Ω—è–ª–∏ ${winner.place} –º–µ—Å—Ç–æ –∏ –ø–æ–ª—É—á–∏–ª–∏ ${winner.coins_won} –º–æ–Ω–µ—Ç!`
                                );
                            } catch (error) {
                                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${winner.user_id}:`, error);
                            }
                        }
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:', error);
            }
        }, 10000);

        setInterval(async () => {
            const participantsCount = await db.getGlobalRatingParticipantsCount();
            if (participantsCount >= 10) {
                await notifyParticipantsReady();
            }
        }, 60000);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
    }
}

async function notifyParticipantsReady() {
    const users = await db.getAllUsers();
    const message = `üéâ –í—Å–µ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã!`;

    for (const user of users) {
        try {
            await bot.telegram.sendMessage(user.user_id, message, {
                parse_mode: 'Markdown'
            });
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error);
        }
    }
}

setInterval(async () => {
    try {
        const currentRound = await db.getCurrentGlobalRound();
        if (currentRound && new Date(currentRound.rating_end_time) <= new Date()) {
            const winners = await db.finishGlobalRound();
            if (winners && winners.length > 0) {
                await broadcastWinners(bot, winners);
            }
            await db.createGlobalRound();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞:', error);
    }
}, 60 * 1000);

async function sendWinnersMessage(bot, userId, winners) {
    try {
        const topWinners = winners.slice(0, 3);
        if (topWinners.length === 0) return;

        await sendWinnerProfile(bot, userId, topWinners[0], 0, topWinners.length);

        bot.action(/winners_prev_(\d+)/, async (ctx) => {
            const index = parseInt(ctx.match[1]);
            const newIndex = index > 0 ? index - 1 : topWinners.length - 1;
            await ctx.answerCbQuery();
            await sendWinnerProfile(bot, ctx.from.id, topWinners[newIndex], newIndex, topWinners.length);
        });

        bot.action(/winners_next_(\d+)/, async (ctx) => {
            const index = parseInt(ctx.match[1]);
            const newIndex = index < topWinners.length - 1 ? index + 1 : 0;
            await ctx.answerCbQuery();
            await sendWinnerProfile(bot, ctx.from.id, topWinners[newIndex], newIndex, topWinners.length);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö:', error);
    }
}

async function sendWinnerProfile(bot, userId, winner, currentIndex, totalWinners) {
    const place = currentIndex + 1;
    const medals = ['ü•á', 'ü•à', 'ü•â'];
    const prizes = [500, 300, 100];

    const keyboard = {
        inline_keyboard: [
            [
                { text: '‚¨ÖÔ∏è', callback_data: `winners_prev_${currentIndex}` },
                { text: `${currentIndex + 1}/${totalWinners}`, callback_data: 'winners_count' },
                { text: '‚û°Ô∏è', callback_data: `winners_next_${currentIndex}` }
            ]
        ]
    };

    const photos = await db.getUserPhotos(winner.user_id);
    const caption = `${medals[currentIndex]} *${place} –º–µ—Å—Ç–æ*\n\n` +
                   `üë§ *${winner.name}*, ${winner.age} –ª–µ—Ç\n` +
                   `üåÜ ${winner.city}\n` +
                   `${winner.description ? `üìù ${winner.description}\n` : ''}` +
                   `\nüí´ –ù–∞–±—Ä–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤: ${winner.total_votes}\n` +
                   `üí∞ –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: ${prizes[currentIndex]}`;

    if (photos.length > 0) {
        await bot.telegram.sendPhoto(userId, photos[0], {
            caption: caption,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    } else {
        await bot.telegram.sendMessage(userId, caption, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }
}

bot.command('startglobalround', async (ctx) => {
    if (ctx.from.id === config.ADMIN_ID) {
        try {
            await db.createGlobalRound();
            await ctx.reply('–ù–æ–≤—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞');
        }
    }
});

bot.action('join_global', async (ctx) => {
    await commands.startGlobalRating(ctx);
});

bot.action('view_global_profiles', async (ctx) => {
    try {
        const profiles = await db.getGlobalRatingParticipants(ctx.from.id);
        const currentProfile = profiles[0];

        if (!currentProfile) {
            await ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏.');
            return;
        }

        const keyboard = {
            inline_keyboard: [
                [
                    { text: '‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è', callback_data: `vote_global_${currentProfile.user_id}` },
                    { text: '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è', callback_data: 'next_global_profile' }
                ]
            ]
        };

        const caption = `üë§ *${currentProfile.name}*, ${currentProfile.age}\n` +
                       `üåÜ ${currentProfile.city}\n` +
                       `${currentProfile.description ? `üìù ${currentProfile.description}\n` : ''}`;

        if (currentProfile.photos && currentProfile.photos.length > 0) {
            await ctx.replyWithPhoto(currentProfile.photos[0], {
                caption: caption,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } else {
            await ctx.reply(caption, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–Ω–∫–µ—Ç:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç.');
    }
});

bot.action(/^vote_global_(\d+)$/, async (ctx) => {
    try {
        const targetId = parseInt(ctx.match[1]);
        const voterId = ctx.from.id;

        if (voterId === targetId) {
            await ctx.answerCbQuery('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è!');
            return;
        }

        const alreadyVoted = await db.checkIfVoted(voterId, targetId);
        if (alreadyVoted) {
            await ctx.answerCbQuery('–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç—É –∞–Ω–∫–µ—Ç—É');
            return;
        }

        await db.saveGlobalVote(voterId, targetId);
        await ctx.answerCbQuery('–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!');
        await showNextGlobalProfile(ctx);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏');
    }
});

bot.action('next_global_profile', async (ctx) => {
    try {
        await showNextGlobalProfile(ctx);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

async function showNextGlobalProfile(ctx) {
    const voterId = ctx.from.id;
    const profiles = await db.getGlobalRatingParticipants(voterId);
    
    if (!profiles || profiles.length === 0) {
        await ctx.reply('–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã.');
        return;
    }

    const currentProfile = profiles[0];
    const keyboard = {
        inline_keyboard: [
            [
                { text: '‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è', callback_data: `vote_global_${currentProfile.user_id}` },
                { text: '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è', callback_data: 'next_global_profile' }
            ]
        ]
    };

    const caption = `üë§ *${currentProfile.name}*, ${currentProfile.age}\n` +
                   `üåÜ ${currentProfile.city}\n` +
                   `${currentProfile.description ? `üìù ${currentProfile.description}\n` : ''}`;

    try {
        await ctx.editMessageCaption(caption, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    } catch (error) {
        if (currentProfile.photos && currentProfile.photos.length > 0) {
            await ctx.replyWithPhoto(currentProfile.photos[0], {
                caption: caption,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } else {
            await ctx.reply(caption, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
    }
}

bot.action('vote_profile', async (ctx) => {
    const targetId = ctx.wizard.state.currentProfile.user_id;
    await db.saveGlobalVote(ctx.from.id, targetId);
    await ctx.answerCbQuery('–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!');
    await showNextGlobalProfile(ctx);
});

bot.action(/^final_vote_(\d+)_(\d+)$/, async (ctx) => {
    try {
        const [, targetId, rating] = ctx.match.map(Number);
        await db.saveFinalVote(targetId, ctx.from.id, rating);
        await ctx.answerCbQuery('–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–∞');
    }
});

module.exports = {
    bot,
    startBot
};