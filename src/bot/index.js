const { Telegraf, Scenes, session } = require('telegraf');
const config = require('../config');
const commands = require('./commands');
const middleware = require('./middleware');
const { registrationScene, editProfileScene } = require('../scenes');
const { mainMenu } = require('../utils/keyboards');
const db = require('../database');

const bot = new Telegraf(config.BOT_TOKEN);

// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ü–µ–Ω
const stage = new Scenes.Stage([registrationScene, editProfileScene]);

// Middleware
bot.use(session());
bot.use(stage.middleware());
bot.use(middleware.errorHandler);
bot.use(middleware.userCheck);
bot.use(middleware.rateLimit);

// –ö–æ–º–∞–Ω–¥—ã
bot.command('start', commands.startCommand);
bot.hears('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', commands.profileCommand);
bot.hears('üîç –ù–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å', commands.startRatingCommand);
bot.hears('üëë –õ–∏–¥–µ—Ä—ã', commands.leadersCommand);
bot.hears('‚≠êÔ∏è –ö—Ç–æ –º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª', commands.whoRatedMeCommand);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
bot.action('edit_profile', async (ctx) => {
    await ctx.scene.enter('edit_profile');
});

bot.action(/^rate_(\d+)_(\d+)$/, async (ctx) => {
    try {
        const [, targetId, rating] = ctx.match.map(Number);
        const result = await db.saveRating(targetId, ctx.from.id, rating);
        
        await ctx.answerCbQuery('–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
        
        if (result?.isMutualHigh) {
            const targetUser = await db.getUserProfile(targetId);
            await ctx.reply(`üéâ –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!\n` +
                          `${targetUser.name} —Ç–æ–∂–µ –≤—ã—Å–æ–∫–æ –æ—Ü–µ–Ω–∏–ª(–∞) –≤–∞—Å!\n` +
                          `${targetUser.username ? `Telegram: @${targetUser.username}` : ''}`);
        }
        
        const nextProfile = await db.getNextProfile(ctx.from.id);
        if (nextProfile) {
            await sendProfileForRating(ctx, nextProfile);
        } else {
            await ctx.reply('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ!', mainMenu);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏');
    }
});

bot.action('skip_profile', async (ctx) => {
    try {
        const nextProfile = await db.getNextProfile(ctx.from.id);
        if (nextProfile) {
            await sendProfileForRating(ctx, nextProfile);
        } else {
            await ctx.reply('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ!', mainMenu);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function sendProfileForRating(ctx, profile) {
    const ratingKeyboard = {
        inline_keyboard: [
            Array.from({ length: 5 }, (_, i) => ({
                text: `${i + 1}‚≠êÔ∏è`,
                callback_data: `rate_${profile.user_id}_${i + 1}`
            })),
            Array.from({ length: 5 }, (_, i) => ({
                text: `${i + 6}‚≠êÔ∏è`,
                callback_data: `rate_${profile.user_id}_${i + 6}`
            })),
            [{ text: '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_profile' }]
        ]
    };

    const caption = `üë§ *${profile.name}*, ${profile.age}\n` +
                   `üåÜ ${profile.city}\n` +
                   `${profile.description ? `üìù ${profile.description}\n` : ''}`;

    if (profile.photos && profile.photos.length > 0) {
        await ctx.replyWithPhoto(profile.photos[0], {
            caption: caption,
            parse_mode: 'Markdown',
            reply_markup: ratingKeyboard
        });
    } else {
        await ctx.reply(caption, {
            parse_mode: 'Markdown',
            reply_markup: ratingKeyboard
        });
    }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
    try {
        await bot.launch();
        console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        setInterval(async () => {
            try {
                const winners = await db.updateWinners();
                if (winners && winners.length > 0) {
                    for (const winner of winners) {
                        if (winner.coins_won > 0) {
                            try {
                                await bot.telegram.sendMessage(
                                    winner.user_id,
                                    `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–Ω—è–ª–∏ ${winner.place} –º–µ—Å—Ç–æ –∏ –ø–æ–ª—É—á–∏–ª–∏ ${winner.coins_won} –º–æ–Ω–µ—Ç!`
                                );
                            } catch (error) {
                                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${winner.user_id}:`, error);
                            }
                        }
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:', error);
            }
        }, 10000);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
    }
}

module.exports = {
    bot,
    startBot
}; 