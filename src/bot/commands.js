const { mainMenu, ratingKeyboard, profileNavigationKeyboard, editProfileButton } = require('../utils/keyboards');
const { formatDate } = require('../utils/helpers');
const { viewProfileButton } = require('../utils/keyboards');
const db = require('../database');
const commands = require('./index');

async function sendProfileForRating(ctx, profile) {
    try {
        const photos = await db.getUserPhotos(profile.user_id);
        const isGlobalParticipant = profile.in_global_rating;
        
        const profileText = `üë§ *–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:*
üìù –ò–º—è: ${profile.name}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${profile.age}
üåÜ –ì–æ—Ä–æ–¥: ${profile.city}
${profile.description ? `\nüìÑ –û —Å–µ–±–µ: ${profile.description}` : ''}
${isGlobalParticipant ? '\nüåç *–£—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ*' : ''}`;

        if (photos.length > 0) {
            const mediaGroup = photos.map((photoId, index) => ({
                type: 'photo',
                media: photoId,
                ...(index === 0 && { caption: profileText, parse_mode: 'Markdown' })
            }));
            await ctx.replyWithMediaGroup(mediaGroup);
            await ctx.reply('–û—Ü–µ–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –æ—Ç 1 –¥–æ 10:', ratingKeyboard(profile.user_id));
        } else {
            await ctx.reply(profileText, {
                parse_mode: 'Markdown',
                ...ratingKeyboard(profile.user_id)
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç—ã.');
    }
}

exports.startCommand = async (ctx) => {
    const user = await db.getUserProfile(ctx.from.id);
    if (!user) {
        const username = ctx.from.username || null;
        await ctx.scene.enter('registration', { username });
    } else {
        await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', mainMenu);
    }
};

exports.profileCommand = async (ctx) => {
    try {
        const user = await db.getUserProfile(ctx.from.id);
        const photos = await db.getUserPhotos(ctx.from.id);
        
        if (!user) {
            return ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        }

        const profileText = `üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*
üìù –ò–º—è: ${user.name}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${user.age}
üåÜ –ì–æ—Ä–æ–¥: ${user.city}
üë• –ü–æ–ª: ${user.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}
${user.description ? `\nüìÑ –û —Å–µ–±–µ: ${user.description}` : ''}`;

        const mediaGroup = photos.map((photoId, index) => ({
            type: 'photo',
            media: photoId,
            ...(index === 0 && { caption: profileText, parse_mode: 'Markdown' })
        }));

        const replyOptions = {
            parse_mode: 'Markdown',
            ...editProfileButton
        };

        if (photos.length > 0) {
            await ctx.replyWithMediaGroup(mediaGroup);
            await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º:', replyOptions);
        } else {
            await ctx.reply(profileText, {
                parse_mode: 'Markdown',
                ...replyOptions
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.');
    }
};

exports.startRatingCommand = async (ctx) => {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥
        const currentRound = await db.getCurrentGlobalRound();
        let profiles;

        if (currentRound && !currentRound.is_final_voting) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞—É–Ω–¥, –ø–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—ã –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
            profiles = await db.getGlobalRatingParticipants(ctx.from.id);
            
            if (profiles && profiles.length > 0) {
                await ctx.reply('üåç –°–µ–π—á–∞—Å –∏–¥–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥! –û—Ü–µ–Ω–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:');
                await sendProfileForRating(ctx, profiles[0]);
                return;
            }
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∞–Ω–∫–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ
        profiles = await db.getProfilesForRating(ctx.from.id);
        
        if (!profiles || profiles.length === 0) {
            return ctx.reply('–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }

        await sendProfileForRating(ctx, profiles[0]);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç.');
    }
};

exports.leadersCommand = async (ctx) => {
    try {
        const winners = await db.getCurrentRoundWinners();
        if (!winners || winners.length === 0) {
            return ctx.reply('–ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ.');
        }

        let leaderboardText = 'üèÜ *–¢–µ–∫—É—â–∏–µ –ª–∏–¥–µ—Ä—ã:*\n\n';
        winners.forEach((winner, index) => {
            const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üë§';
            leaderboardText += `${medal} ${winner.name}\n` +
                             `‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: ${Number(winner.average_rating).toFixed(2)}\n` +
                             `üí∞ –ú–æ–Ω–µ—Ç: ${winner.coins || 0}\n` +
                             `${winner.coins_received ? `üíµ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞ –º–µ—Å—Ç–æ: ${winner.coins_received}\n` : ''}` +
                             `\n`;
        });

        await ctx.reply(leaderboardText, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–µ—Ä–æ–≤:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–µ—Ä–æ–≤.');
    }
};

exports.whoRatedMeCommand = (bot) => async (ctx) => {
    try {
        const ratings = await db.getLastRatings(ctx.from.id);
        
        if (!ratings || ratings.length === 0) {
            return ctx.reply('–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ü–µ–Ω–∏–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.');
        }

        const uniqueRatings = ratings.filter((rating, index, self) =>
            index === self.findIndex((r) => r.from_user_id === rating.from_user_id)
        ).slice(0, 10);

        const showRating = async (ctx, index) => {
            try {
                const rating = uniqueRatings[index];
                const raterProfile = await db.getUserProfile(rating.from_user_id);
                const photos = await db.getUserPhotos(rating.from_user_id);

                const escapedUsername = raterProfile.username ? 
                    raterProfile.username.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1') : '';

                const keyboard = {
                    inline_keyboard: profileNavigationKeyboard(index, uniqueRatings.length).inline_keyboard
                };

                const caption = `üë§ *${raterProfile.name}*, ${raterProfile.age} –ª–µ—Ç\n` +
                              `üåÜ ${raterProfile.city}\n` +
                              `‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞: ${rating.rating}/10\n` +
                              `${raterProfile.username ? `üì± @${escapedUsername}\n` : ''}`;

                if (ctx.callbackQuery) {
                    if (photos.length > 0) {
                        await ctx.editMessageMedia({
                            type: 'photo',
                            media: photos[0],
                            caption: caption,
                            parse_mode: 'Markdown'
                        }, { reply_markup: keyboard });
                    } else {
                        await ctx.editMessageText(caption, {
                            parse_mode: 'Markdown',
                            reply_markup: keyboard
                        });
                    }
                } else {
                    if (photos.length > 0) {
                        await ctx.replyWithPhoto(photos[0], {
                            caption: caption,
                            parse_mode: 'Markdown',
                            reply_markup: keyboard
                        });
                    } else {
                        await ctx.reply(caption, {
                            parse_mode: 'Markdown',
                            reply_markup: keyboard
                        });
                    }
                }
            } catch (error) {
                if (!error.message.includes('message is not modified')) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–π—Ç–∏–Ω–≥–∞.');
                }
            }
        };

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –æ—Ü–µ–Ω–∫—É
        await showRating(ctx, 0);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        bot.action(/rating_prev_(\d+)/, async (ctx) => {
            const index = parseInt(ctx.match[1]);
            const newIndex = index > 0 ? index - 1 : uniqueRatings.length - 1;
            await ctx.answerCbQuery();
            await showRating(ctx, newIndex);
        });

        bot.action(/rating_next_(\d+)/, async (ctx) => {
            const index = parseInt(ctx.match[1]);
            const newIndex = index < uniqueRatings.length - 1 ? index + 1 : 0;
            await ctx.answerCbQuery();
            await showRating(ctx, newIndex);
        });

        bot.action('rating_count', async (ctx) => {
            await ctx.answerCbQuery();
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ü–µ–Ω–æ–∫.');
    }
};

exports.globalRatingCommand = async (ctx) => {
    try {
        const user = await db.getUserProfile(ctx.from.id);
        const currentRound = await db.getCurrentGlobalRound();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã
        const isBlocked = user.last_global_win && 
            (new Date(user.last_global_win).getTime() + 2 * 60 * 60 * 1000 > Date.now());
        
        const minutesLeft = isBlocked ? 
            Math.ceil((new Date(user.last_global_win).getTime() + 2 * 60 * 60 * 1000 - Date.now()) / 60000) : 0;

        if (isBlocked) {
            return ctx.reply(`‚ö†Ô∏è –í—ã –Ω–µ–¥–∞–≤–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ!\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${minutesLeft} –º–∏–Ω—É—Ç.`);
        }

        // –ï—Å–ª–∏ –∏–¥–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
        if (currentRound?.is_final_voting) {
            return ctx.reply('üîí –°–µ–π—á–∞—Å –∏–¥–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è.');
        }

        let message = `üåç *–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞*\n\n`;
        message += `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: 50 –º–æ–Ω–µ—Ç\n`;
        message += `üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.coins} –º–æ–Ω–µ—Ç\n\n`;
        message += `üèÜ –ü—Ä–∏–∑—ã:\n`;
        message += `1 –º–µ—Å—Ç–æ: 500 –º–æ–Ω–µ—Ç\n`;
        message += `2 –º–µ—Å—Ç–æ: 300 –º–æ–Ω–µ—Ç\n`;
        message += `3 –º–µ—Å—Ç–æ: 100 –º–æ–Ω–µ—Ç\n`;

        const keyboard = {
            reply_markup: {
                inline_keyboard: []
            }
        };

        if (currentRound && user.in_global_rating) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è —Ä–∞—É–Ω–¥–∞
            const now = new Date();
            const endTime = new Date(currentRound.rating_end_time);
            
            if (now > endTime) {
                // –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥
                await db.finishGlobalRound();
                message += `\n\nüèÅ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`;
            } else {
                const timeLeft = Math.ceil((endTime.getTime() - now.getTime()) / 60000);
                message += `\n‚è∞ –î–æ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞: ${timeLeft} –º–∏–Ω—É—Ç`;
                message += `\n\n‚è≥ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –æ—Ü–µ–Ω–∫–µ...`;
            }
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É—á–∞—Å—Ç–∏—è –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç
            // –∏ –æ–Ω –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ
            if (user.coins >= 50) {
                message += '\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!';
                keyboard.reply_markup.inline_keyboard.push([
                    { text: 'üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞ 50 –º–æ–Ω–µ—Ç', callback_data: 'join_global' }
                ]);
            } else {
                message += '\n\n‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è';
            }
        }

        await ctx.reply(message, {
            parse_mode: 'Markdown',
            ...keyboard
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.');
    }
};

exports.balanceCommand = async (ctx) => {
    try {
        const user = await db.getUserProfile(ctx.from.id);
        if (!user) {
            return ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        }

        const balanceText = `üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.coins} –º–æ–Ω–µ—Ç*`;
        await ctx.reply(balanceText, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞.');
    }
};

async function startGlobalRating(ctx) {
    const user = await db.getUserProfile(ctx.from.id);

    if (user.coins < 50) {
        return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è!');
    }

    try {
        await db.joinGlobalRating(ctx.from.id);
        await ctx.answerCbQuery('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ!');
        await ctx.reply('–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞ (30 –º–∏–Ω—É—Ç).');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ.');
    }
}

async function broadcastTop10(bot) {
    try {
        const top10 = await db.getGlobalRatingTop10();
        const allUsers = await db.getAllUsers();

        let message = 'üèÜ *–¢–µ–∫—É—â–∏–π —Ç–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:*\n\n';
        
        top10.forEach((user, index) => {
            const medal = index < 3 ? ['ü•á', 'ü•à', 'ü•â'][index] : 'üéØ';
            message += `${medal} ${index + 1}. ${user.name} (ID: ${user.user_id})\n`;
            message += `‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: ${user.total_rating || 0}\n`;
            message += `üë• –ì–æ–ª–æ—Å–æ–≤: ${user.votes_count || 0}\n\n`;
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for (const user of allUsers) {
            try {
                await bot.telegram.sendMessage(user.user_id, message, {
                    parse_mode: 'Markdown'
                });
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 100));
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Ç–æ–ø-10:', error);
    }
}

async function finishGlobalRound() {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        const allParticipants = await client.query(`
            SELECT 
                u.*,
                COUNT(gv.voter_id) as votes_count,
                SUM(gv.rating) as total_rating,
                ROW_NUMBER() OVER (ORDER BY SUM(gv.rating) DESC, COUNT(gv.voter_id) DESC) as place
            FROM users u
            LEFT JOIN global_votes gv ON gv.candidate_id = u.user_id
            WHERE u.in_global_rating = true
            GROUP BY u.user_id
        `);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–ø-10 –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        await broadcastTop10(bot);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ø-3 –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        for (let i = 0; i < allParticipants.rows.length; i++) {
            const participant = allParticipants.rows[i];
            const coins = i === 0 ? 500 : i === 1 ? 300 : i === 2 ? 100 : 0;

            if (coins > 0) {
                await client.query(`
                    UPDATE users 
                    SET coins = coins + $1,
                        last_global_win = CASE 
                            WHEN $2 <= 2 THEN NOW() 
                            ELSE last_global_win 
                        END
                    WHERE user_id = $3
                `, [coins, i, participant.user_id]);
            }
        }

        await client.query(`UPDATE users SET in_global_rating = false WHERE in_global_rating = true`);
        await client.query(`DELETE FROM global_votes`);

        await client.query('COMMIT');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        await broadcastGlobalResults(bot, allParticipants.rows);

        return allParticipants.rows;
    } catch (error) {
        await client.query('ROLLBACK');
        throw error;
    } finally {
        client.release();
    }
}

async function broadcastGlobalResults(bot, participants) {
    try {
        const participantIds = participants.map(p => p.user_id);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        let resultsMessage = 'üèÜ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:*\n\n';
        
        participants.forEach((participant, index) => {
            const place = participant.place;
            const medal = place <= 3 ? ['ü•á', 'ü•à', 'ü•â'][place - 1] : 'üë§';
            const coins = place <= 3 ? [500, 300, 100][place - 1] : 0;
            
            resultsMessage += `${medal} ${place} –º–µ—Å—Ç–æ: *${participant.name}*\n`;
            resultsMessage += `üí´ –ì–æ–ª–æ—Å–æ–≤: ${participant.votes_count}\n`;
            if (coins > 0) {
                resultsMessage += `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${coins} –º–æ–Ω–µ—Ç\n`;
            }
            resultsMessage += '\n';
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        for (const participant of participants) {
            try {
                const personalMessage = `üéØ *–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ:*\n\n` +
                    `–ú–µ—Å—Ç–æ: ${participant.place}\n` +
                    `–ù–∞–±—Ä–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤: ${participant.votes_count}\n` +
                    (participant.place <= 3 ? `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${[500, 300, 100][participant.place - 1]} –º–æ–Ω–µ—Ç\n` : '') +
                    `\n${resultsMessage}`;

                await bot.telegram.sendMessage(participant.user_id, personalMessage, {
                    parse_mode: 'Markdown'
                });
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${participant.user_id}:`, error);
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        const allUsers = await db.getAllUsers();
        for (const user of allUsers) {
            if (!participantIds.includes(user.user_id)) {
                try {
                    await bot.telegram.sendMessage(user.user_id, resultsMessage, {
                        parse_mode: 'Markdown'
                    });
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error);
                }
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–ø-10
function startPeriodicTop10Updates(bot) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    setInterval(async () => {
        const currentRound = await db.getCurrentGlobalRound();
        if (currentRound && !currentRound.is_final_voting) {
            await broadcastTop10(bot);
        }
    }, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
}

exports.startGlobalRating = startGlobalRating;

exports.viewProfileCommand = async (ctx) => {
    const userId = ctx.callbackQuery.data.split('_')[2];
    const profile = await db.getUserProfile(userId);
    
    if (profile) {
        const profileText = `üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*\nüìù –ò–º—è: ${profile.name}\nüéÇ –í–æ–∑—Ä–∞—Å—Ç: ${profile.age}\nüåÜ –ì–æ—Ä–æ–¥: ${profile.city}\n${profile.description ? `üìÑ –û —Å–µ–±–µ: ${profile.description}` : ''}`;
        
        const photos = await db.getUserPhotos(userId);
        if (photos.length > 0) {
            const mediaGroup = photos.map((photoId, index) => ({
                type: 'photo',
                media: photoId,
                ...(index === 0 && { caption: profileText, parse_mode: 'Markdown' })
            }));
            await ctx.replyWithMediaGroup(mediaGroup);
        } else {
            await ctx.reply(profileText, { parse_mode: 'Markdown' });
        }
    } else {
        await ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
};

exports.registerBotActions = (bot) => {
    bot.action(/^rate_(\d+)_(\d+)$/, async (ctx) => {
        try {
            const [, targetId, rating] = ctx.match.map(Number);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—Ü–µ–Ω–∫—É (–∫–∞–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö, —Ç–∞–∫ –∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∞–Ω–∫–µ—Ç)
            const existingRating = await db.getRating(targetId, ctx.from.id);
            if (existingRating) {
                // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
                const isTargetInGlobalRating = await db.isUserInGlobalRating(targetId);
                if (isTargetInGlobalRating) {
                    const nextGlobalProfile = await db.getGlobalRatingParticipants(ctx.from.id);
                    if (nextGlobalProfile && nextGlobalProfile.length > 0) {
                        await sendProfileForRating(ctx, nextGlobalProfile[0]);
                    } else {
                        await ctx.reply('–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ!', mainMenu);
                    }
                } else {
                    const nextProfile = await db.getProfilesForRating(ctx.from.id);
                    if (nextProfile && nextProfile.length > 0) {
                        await sendProfileForRating(ctx, nextProfile[0]);
                    } else {
                        await ctx.reply('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! üòä', mainMenu);
                    }
                }
                await ctx.answerCbQuery('–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ —ç—Ç—É –∞–Ω–∫–µ—Ç—É');
                return;
            }

            const isTargetInGlobalRating = await db.isUserInGlobalRating(targetId);
            const currentRound = await db.getCurrentGlobalRound();

            if (isTargetInGlobalRating && currentRound) {
                try {
                    await db.saveGlobalVote(ctx.from.id, targetId, rating);
                    await ctx.answerCbQuery('–û—Ü–µ–Ω–∫–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
                    
                    const nextGlobalProfile = await db.getGlobalRatingParticipants(ctx.from.id);
                    if (nextGlobalProfile && nextGlobalProfile.length > 0) {
                        await sendProfileForRating(ctx, nextGlobalProfile[0]);
                    } else {
                        await ctx.reply('–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ!', mainMenu);
                    }
                } catch (voteError) {
                    // –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
                    const nextGlobalProfile = await db.getGlobalRatingParticipants(ctx.from.id);
                    if (nextGlobalProfile && nextGlobalProfile.length > 0) {
                        await sendProfileForRating(ctx, nextGlobalProfile[0]);
                    } else {
                        await ctx.reply('–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ!', mainMenu);
                    }
                    await ctx.answerCbQuery();
                }
            } else {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ã—á–Ω—É—é –æ—Ü–µ–Ω–∫—É –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
                await db.saveRating(targetId, ctx.from.id, rating);
                await ctx.answerCbQuery('–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');

                // –ù–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
                if (rating >= 7) {
                    const raterProfile = await db.getUserProfile(ctx.from.id);
                    const raterPhotos = await db.getUserPhotos(ctx.from.id);
                    
                    const notificationText = `üåü –í–∞—Å –≤—ã—Å–æ–∫–æ –æ—Ü–µ–Ω–∏–ª–∏!\n\n` +
                                         `‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞: ${rating}/10\n\n` +
                                         `üë§ –ü—Ä–æ—Ñ–∏–ª—å —Ç–æ–≥–æ, –∫—Ç–æ –≤–∞—Å –æ—Ü–µ–Ω–∏–ª:\n` +
                                         `üìù –ò–º—è: ${raterProfile.name}\n` +
                                         `üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${raterProfile.age}\n` +
                                         `üåÜ –ì–æ—Ä–æ–¥: ${raterProfile.city}\n` +
                                         `${raterProfile.username ? `üì± @${raterProfile.username}\n` : ''}` +
                                         `${raterProfile.description ? `\nüìÑ –û —Å–µ–±–µ: ${raterProfile.description}` : ''}`;

                    if (raterPhotos.length > 0) {
                        const mediaGroup = raterPhotos.map((photoId, index) => ({
                            type: 'photo',
                            media: photoId,
                            ...(index === 0 && { caption: notificationText })
                        }));
                        await ctx.telegram.sendMediaGroup(targetId, mediaGroup);
                    } else {
                        await ctx.telegram.sendMessage(targetId, notificationText, { 
                            parse_mode: 'Markdown'
                        });
                    }
                }
            }

            const nextProfile = await db.getNextProfile(ctx.from.id);
            if (!nextProfile) {
                await ctx.reply('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! üòä', mainMenu);
                return;
            }

            await sendProfileForRating(ctx, nextProfile);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏:', error);
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏');
        }
    });

    bot.action(/^final_select_(\d+)$/, async (ctx) => {
        try {
            const candidateId = parseInt(ctx.match[1]);
            const voterId = ctx.from.id;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Å–µ–π—á–∞—Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥
            const currentRound = await db.getCurrentGlobalRound();
            if (!currentRound?.is_final_voting) {
                await ctx.answerCbQuery('–§–∏–Ω–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const hasVoted = await db.checkFinalVote(voterId);
            if (hasVoted) {
                await ctx.answerCbQuery('–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å–≤–æ–π –≤—ã–±–æ—Ä!');
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å
            await db.saveFinalVote(candidateId, voterId);
            await ctx.answerCbQuery('–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!');
            await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞:', error);
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–∞');
        }
    });

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª—è–º
    bot.action(/^final_(prev|next)_(\d+)$/, async (ctx) => {
        try {
            const [, direction, currentId] = ctx.match;
            const profiles = await db.getTopProfiles();
            const currentIndex = profiles.findIndex(p => p.user_id === parseInt(currentId));
            
            let newIndex;
            if (direction === 'prev') {
                newIndex = currentIndex > 0 ? currentIndex - 1 : profiles.length - 1;
            } else {
                newIndex = currentIndex < profiles.length - 1 ? currentIndex + 1 : 0;
            }

            await sendFinalVotingProfile(ctx.telegram, ctx.from.id, profiles[newIndex]);
            await ctx.deleteMessage();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    });

    bot.action(/^global_vote_(\d+)_(\d+)$/, async (ctx) => {
        try {
            const [, targetId, rating] = ctx.match.map(Number);
            const voterId = ctx.from.id;

            if (voterId === targetId) {
                await ctx.answerCbQuery('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è!');
                return;
            }

            try {
                await db.saveGlobalVote(voterId, targetId, rating);
                await ctx.answerCbQuery('–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
                
                // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
                const nextProfiles = await db.getGlobalRatingParticipants(voterId);
                if (nextProfiles && nextProfiles.length > 0) {
                    await sendProfileForRating(ctx, nextProfiles[0]);
                } else {
                    await ctx.reply('–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ!', mainMenu);
                }
            } catch (error) {
                if (error.message === '–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞') {
                    await ctx.answerCbQuery(error.message);
                    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                    const nextProfiles = await db.getGlobalRatingParticipants(voterId);
                    if (nextProfiles && nextProfiles.length > 0) {
                        await sendProfileForRating(ctx, nextProfiles[0]);
                    } else {
                        await ctx.reply('–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ!', mainMenu);
                    }
                } else {
                    throw error;
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏:', error);
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏');
        }
    });

    bot.action('check_subscription', async (ctx) => {
        try {
            const chatMember = await ctx.telegram.getChatMember('@meetik_info', ctx.from.id);
            
            if (['creator', 'administrator', 'member'].includes(chatMember.status)) {
                await ctx.answerCbQuery('‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º');
                await ctx.deleteMessage();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
                    reply_markup: mainMenu
                });
            } else {
                await ctx.answerCbQuery('‚ùå –í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏');
        }
    });
};

async function startFinalVoting(bot) {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const topProfiles = await client.query(`
            SELECT u.*, SUM(gv.rating) as total_rating
            FROM users u
            LEFT JOIN global_votes gv ON gv.candidate_id = u.user_id
            WHERE u.in_global_rating = true
            GROUP BY u.user_id
            ORDER BY total_rating DESC
            LIMIT 10
        `);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—É–Ω–¥–∞
        await client.query(`
            UPDATE global_rounds 
            SET is_final_voting = true 
            WHERE is_active = true
        `);

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è —É —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –ø–æ–ø–∞–ª –≤ —Ç–æ–ø-10
        await client.query(`
            UPDATE users 
            SET in_global_rating = false 
            WHERE user_id NOT IN (
                SELECT user_id FROM (${topProfiles.text}) top_10
            )
        `);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        const users = await client.query('SELECT user_id FROM users WHERE in_global_rating = false');
        
        for (const user of users.rows) {
            for (const profile of topProfiles.rows) {
                try {
                    await sendFinalVotingProfile(bot, user.user_id, profile);
                    await new Promise(resolve => setTimeout(resolve, 100)); // –ó–∞–¥–µ—Ä–∂–∫–∞
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error);
                }
            }
        }

        await client.query('COMMIT');
    } catch (error) {
        await client.query('ROLLBACK');
        throw error;
    } finally {
        client.release();
    }
}

async function sendFinalVotingProfile(bot, userId, profile) {
    try {
        const photos = await db.getUserPhotos(profile.user_id);
        const keyboard = {
            inline_keyboard: [
                [
                    { text: '‚¨ÖÔ∏è', callback_data: `final_prev_${profile.user_id}` },
                    { text: '‚ù§Ô∏è –í—ã–±—Ä–∞—Ç—å', callback_data: `final_select_${profile.user_id}` },
                    { text: '‚û°Ô∏è', callback_data: `final_next_${profile.user_id}` }
                ]
            ]
        };

        const caption = `üë§ *${profile.name}*, ${profile.age} –ª–µ—Ç\n` +
                       `üåÜ ${profile.city}\n` +
                       `${profile.description ? `üìù ${profile.description}\n` : ''}` +
                       `\nüí´ –ù–∞–±—Ä–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤: ${profile.total_votes}`;

        if (photos.length > 0) {
            await bot.telegram.sendPhoto(userId, photos[0], {
                caption: caption,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } else {
            await bot.telegram.sendMessage(userId, caption, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', error);
    }
}

async function broadcastWinners(bot, winners) {
    const users = await db.getAllUsers();
    
    for (const user of users) {
        try {
            const message = `üèÜ –ó–∞–≤–µ—Ä—à–∏–ª—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥!\n\n–¢–æ–ø-3 –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:`;
            await bot.telegram.sendMessage(user.user_id, message);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            await sendWinnerProfile(bot, user.user_id, winners[0], 0, winners.length);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error);
        }
    }
}

async function sendWinnerProfile(bot, userId, winner, currentIndex, totalWinners) {
    const place = currentIndex + 1;
    const medals = ['ü•á', 'ü•à', 'ü•â'];
    const prizes = [500, 300, 100];

    const keyboard = {
        inline_keyboard: [
            [
                { text: '‚¨ÖÔ∏è', callback_data: `winners_prev_${currentIndex}` },
                { text: `${currentIndex + 1}/3`, callback_data: 'winners_count' },
                { text: '‚û°Ô∏è', callback_data: `winners_next_${currentIndex}` }
            ]
        ]
    };

    const photos = await db.getUserPhotos(winner.user_id);
    const caption = `${medals[currentIndex]} *${place} –º–µ—Å—Ç–æ*\n\n` +
                   `üë§ *${winner.name}*, ${winner.age} –ª–µ—Ç\n` +
                   `üåÜ ${winner.city}\n` +
                   `${winner.description ? `üìù ${winner.description}\n` : ''}` +
                   `\nüí´ –ù–∞–±—Ä–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤: ${winner.votes_count}\n` +
                   `üí∞ –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: ${prizes[currentIndex]}`;

    try {
        if (photos.length > 0) {
            await bot.telegram.sendPhoto(userId, photos[0], {
                caption: caption,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } else {
            await bot.telegram.sendMessage(userId, caption, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:', error);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
exports.startPeriodicTop10Updates = startPeriodicTop10Updates;
exports.broadcastTop10 = broadcastTop10;