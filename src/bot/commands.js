const { mainMenu } = require('../utils/keyboards');
const { formatDate } = require('../utils/helpers');
const db = require('../database');

exports.startCommand = async (ctx) => {
    const user = await db.getUserProfile(ctx.from.id);
    if (!user) {
        await ctx.scene.enter('registration');
    } else {
        await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', mainMenu);
    }
};

exports.profileCommand = async (ctx) => {
    try {
        const user = await db.getUserProfile(ctx.from.id);
        const photos = await db.getUserPhotos(ctx.from.id);
        
        if (!user) {
            return ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        }

        const profileText = `üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*
üìù –ò–º—è: ${user.name}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${user.age}
üåÜ –ì–æ—Ä–æ–¥: ${user.city}
üë• –ü–æ–ª: ${user.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}
${user.description ? `\nüìÑ –û —Å–µ–±–µ: ${user.description}` : ''}`;

        const editButton = {
            reply_markup: {
                inline_keyboard: [[
                    { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'edit_profile' }
                ]]
            }
        };

        if (photos.length > 0) {
            const mediaGroup = photos.map((photoId, index) => ({
                type: 'photo',
                media: photoId,
                ...(index === 0 && { caption: profileText, parse_mode: 'Markdown' })
            }));
            await ctx.replyWithMediaGroup(mediaGroup);
            await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º:', editButton);
        } else {
            await ctx.reply(profileText, { 
                parse_mode: 'Markdown',
                ...editButton
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.');
    }
};

exports.startRatingCommand = async (ctx) => {
    try {
        const profiles = await db.getProfilesForRating(ctx.from.id);
        
        if (!profiles || profiles.length === 0) {
            return ctx.reply('–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }

        await sendProfileForRating(ctx, profiles[0]);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç.');
    }
};

exports.leadersCommand = async (ctx) => {
    try {
        const winners = await db.getCurrentRoundWinners();
        if (!winners || winners.length === 0) {
            return ctx.reply('–ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ.');
        }

        let leaderboardText = 'üèÜ *–¢–µ–∫—É—â–∏–µ –ª–∏–¥–µ—Ä—ã:*\n\n';
        winners.forEach((winner, index) => {
            const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üë§';
            leaderboardText += `${medal} ${winner.name}\n` +
                             `‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: ${Number(winner.average_rating).toFixed(2)}\n` +
                             `üí∞ –ú–æ–Ω–µ—Ç: ${winner.coins || 0}\n` +
                             `${winner.coins_received ? `üíµ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞ –º–µ—Å—Ç–æ: ${winner.coins_received}\n` : ''}` +
                             `\n`;
        });

        await ctx.reply(leaderboardText, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–µ—Ä–æ–≤:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–µ—Ä–æ–≤.');
    }
};

exports.whoRatedMeCommand = async (ctx) => {
    try {
        const ratings = await db.getLastRatings(ctx.from.id);
        
        if (!ratings || ratings.length === 0) {
            return ctx.reply('–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ü–µ–Ω–∏–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.');
        }

        let message = 'üåü *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:*\n\n';
        
        for (const rating of ratings) {
            const raterProfile = await db.getUserProfile(rating.from_user_id);
            if (raterProfile) {
                message += `üë§ *${raterProfile.name}*, ${raterProfile.age} –ª–µ—Ç\n` +
                          `üåÜ ${raterProfile.city}\n` +
                          `‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞: ${rating.rating}/10\n` +
                          `üïê ${formatDate(rating.created_at)}\n`;
                
                if (rating.rating >= 7 && raterProfile.username) {
                    message += `üì± @${raterProfile.username}\n`;
                }
                message += '\n';
            }
        }

        await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ü–µ–Ω–æ–∫.');
    }
};

exports.globalRatingCommand = async (ctx) => {
    try {
        const user = await db.getUserProfile(ctx.from.id);
        const participantsCount = await db.getGlobalRatingParticipantsCount();
        const currentRound = await db.getCurrentGlobalRound();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã
        const isBlocked = user.last_global_win && 
            (new Date(user.last_global_win).getTime() + 2 * 60 * 60 * 1000 > Date.now());
        
        const minutesLeft = isBlocked ? 
            Math.ceil((new Date(user.last_global_win).getTime() + 2 * 60 * 60 * 1000 - Date.now()) / 60000) : 0;

        let message = `üåç *–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞*\n\n`;
        message += `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: 50 –º–æ–Ω–µ—Ç\n`;
        message += `üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.coins} –º–æ–Ω–µ—Ç\n`;
        message += `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participantsCount}/10\n\n`;
        message += `üèÜ –ü—Ä–∏–∑—ã:\n`;
        message += `1 –º–µ—Å—Ç–æ: 500 –º–æ–Ω–µ—Ç\n`;
        message += `2 –º–µ—Å—Ç–æ: 300 –º–æ–Ω–µ—Ç\n`;
        message += `3 –º–µ—Å—Ç–æ: 100 –º–æ–Ω–µ—Ç\n`;
        
        const keyboard = {
            reply_markup: {
                inline_keyboard: []
            }
        };

        if (currentRound && user.in_global_rating) {
            const timeLeft = Math.ceil(currentRound.minutes_left);
            const stats = await db.getGlobalRatingParticipants();
            const userRank = stats.findIndex(p => p.user_id === user.user_id) + 1;
            
            message += `\n‚è∞ –î–æ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞: ${timeLeft} –º–∏–Ω—É—Ç`;
            message += `\nüìä –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ: ${userRank}/${stats.length}`;
            message += `\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞...`;
        } else if (!currentRound) {
            if (isBlocked) {
                message += `\n\n‚ö†Ô∏è –í—ã –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–±–µ–¥–∏–ª–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ!\n`;
                message += `‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${minutesLeft} –º–∏–Ω—É—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è.`;
            } else if (user.coins >= 50) {
                message += '\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥!';
                keyboard.reply_markup.inline_keyboard.push([
                    { text: 'üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞ 50 –º–æ–Ω–µ—Ç', callback_data: 'join_global' }
                ]);
            } else {
                message += '\n\n‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è';
            }
        } else if (participantsCount < 10 && !user.in_global_rating) {
            if (!isBlocked && user.coins >= 50) {
                message += '\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ä–∞—É–Ω–¥—É!';
                keyboard.reply_markup.inline_keyboard.push([
                    { text: 'üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞ 50 –º–æ–Ω–µ—Ç', callback_data: 'join_global' }
                ]);
            }
        }

        if (currentRound) {
            keyboard.reply_markup.inline_keyboard.push([
                { text: 'üëÄ –û—Ü–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—ã', callback_data: 'view_global_profiles' }
            ]);
        }

        await ctx.reply(message, {
            parse_mode: 'Markdown',
            ...keyboard
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.');
    }
};