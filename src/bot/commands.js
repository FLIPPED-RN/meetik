const { mainMenu } = require('../utils/keyboards');
const { formatDate } = require('../utils/helpers');
const { viewProfileButton } = require('../utils/keyboards');
const db = require('../database');
const commands = require('./index');

async function sendProfileForRating(ctx, profile) {
    try {
        const photos = await db.getUserPhotos(profile.user_id);
        const profileText = `üë§ *–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:*
üìù –ò–º—è: ${profile.name}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${profile.age}
üåÜ –ì–æ—Ä–æ–¥: ${profile.city}
${profile.description ? `\nüìÑ –û —Å–µ–±–µ: ${profile.description}` : ''}`;

        const ratingKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '1Ô∏è‚É£', callback_data: `rate_${profile.user_id}_1` },
                        { text: '2Ô∏è‚É£', callback_data: `rate_${profile.user_id}_2` },
                        { text: '3Ô∏è‚É£', callback_data: `rate_${profile.user_id}_3` },
                        { text: '4Ô∏è‚É£', callback_data: `rate_${profile.user_id}_4` },
                        { text: '5Ô∏è‚É£', callback_data: `rate_${profile.user_id}_5` }
                    ],
                    [
                        { text: '6Ô∏è‚É£', callback_data: `rate_${profile.user_id}_6` },
                        { text: '7Ô∏è‚É£', callback_data: `rate_${profile.user_id}_7` },
                        { text: '8Ô∏è‚É£', callback_data: `rate_${profile.user_id}_8` },
                        { text: '9Ô∏è‚É£', callback_data: `rate_${profile.user_id}_9` },
                        { text: 'üîü', callback_data: `rate_${profile.user_id}_10` }
                    ]
                ]
            }
        };

        const viewProfileButton = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: `view_profile_${profile.user_id}` }
                    ]
                ]
            }
        };

        const isGlobalParticipant = await db.isUserInGlobalRating(ctx.from.id);
        if (isGlobalParticipant) {
            await ctx.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã –≤–æ –≤—Ä–µ–º—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.');
            return;
        }

        if (photos.length > 0) {
            const mediaGroup = photos.map((photoId, index) => ({
                type: 'photo',
                media: photoId,
                ...(index === 0 && { caption: profileText, parse_mode: 'Markdown' })
            }));
            await ctx.replyWithMediaGroup(mediaGroup);
            await ctx.reply('–û—Ü–µ–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –æ—Ç 1 –¥–æ 10:', ratingKeyboard);
        } else {
            await ctx.reply(profileText, {
                parse_mode: 'Markdown',
                ...ratingKeyboard
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç—ã.');
    }
}

exports.startCommand = async (ctx) => {
    const user = await db.getUserProfile(ctx.from.id);
    if (!user) {
        const username = ctx.from.username || null;
        await ctx.scene.enter('registration', { username });
    } else {
        await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', mainMenu);
    }
};

exports.profileCommand = async (ctx) => {
    try {
        const user = await db.getUserProfile(ctx.from.id);
        const photos = await db.getUserPhotos(ctx.from.id);
        
        if (!user) {
            return ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        }

        const profileText = `üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*
üìù –ò–º—è: ${user.name}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${user.age}
üåÜ –ì–æ—Ä–æ–¥: ${user.city}
üë• –ü–æ–ª: ${user.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}
${user.description ? `\nüìÑ –û —Å–µ–±–µ: ${user.description}` : ''}`;

        const mediaGroup = photos.map((photoId, index) => ({
            type: 'photo',
            media: photoId,
            ...(index === 0 && { caption: profileText, parse_mode: 'Markdown' })
        }));

        const replyOptions = {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'edit_profile' }
                    ]
                ]
            }
        };

        if (photos.length > 0) {
            await ctx.replyWithMediaGroup(mediaGroup);
            await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º:', replyOptions);
        } else {
            await ctx.reply(profileText, {
                parse_mode: 'Markdown',
                ...replyOptions
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.');
    }
};

exports.startRatingCommand = async (ctx) => {
    try {
        const userInGlobal = await db.isUserInGlobalRating(ctx.from.id);
        if (userInGlobal) {
            return ctx.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã, –ø–æ–∫–∞ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ.');
        }

        const profiles = await db.getProfilesForRating(ctx.from.id);
        
        if (!profiles || profiles.length === 0) {
            return ctx.reply('–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }

        await sendProfileForRating(ctx, profiles[0]);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç.');
    }
};

exports.leadersCommand = async (ctx) => {
    try {
        const winners = await db.getCurrentRoundWinners();
        if (!winners || winners.length === 0) {
            return ctx.reply('–ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ.');
        }

        let leaderboardText = 'üèÜ *–¢–µ–∫—É—â–∏–µ –ª–∏–¥–µ—Ä—ã:*\n\n';
        winners.forEach((winner, index) => {
            const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üë§';
            leaderboardText += `${medal} ${winner.name}\n` +
                             `‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: ${Number(winner.average_rating).toFixed(2)}\n` +
                             `üí∞ –ú–æ–Ω–µ—Ç: ${winner.coins || 0}\n` +
                             `${winner.coins_received ? `üíµ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞ –º–µ—Å—Ç–æ: ${winner.coins_received}\n` : ''}` +
                             `\n`;
        });

        await ctx.reply(leaderboardText, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–µ—Ä–æ–≤:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–µ—Ä–æ–≤.');
    }
};

exports.whoRatedMeCommand = (bot) => async (ctx) => {
    try {
        const ratings = await db.getLastRatings(ctx.from.id);
        
        if (!ratings || ratings.length === 0) {
            return ctx.reply('–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ü–µ–Ω–∏–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.');
        }

        const uniqueUserIds = new Set(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        let currentIndex = 0; // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –∞–Ω–∫–µ—Ç—ã

        const showNextRating = async () => {
            if (currentIndex >= ratings.length) {
                return ctx.reply('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.');
            }

            const rating = ratings[currentIndex];
            if (!uniqueUserIds.has(rating.from_user_id)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
                uniqueUserIds.add(rating.from_user_id);
                const raterProfile = await db.getUserProfile(rating.from_user_id);
                if (raterProfile) {
                    const photos = await db.getUserPhotos(raterProfile.user_id);
                    if (photos.length > 0) {
                        const mediaGroup = photos.map((photoId, index) => ({
                            type: 'photo',
                            media: photoId,
                            ...(index === 0 && { caption: `üë§ *${raterProfile.name.replace(/([_*[\]()~`>#+\-.!])/g, '\\$1')}*, ${raterProfile.age} –ª–µ—Ç\nüåÜ ${raterProfile.city}\n‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞: ${rating.rating}/10\n${raterProfile.username ? `üì± –ü—Ä–æ—Ñ–∏–ª—å @${raterProfile.username.replace(/([_*[\]()~`>#+\-.!])/g, '\\$1')}\n` : ''}`, parse_mode: 'MarkdownV2' })
                        }));
                        await ctx.replyWithMediaGroup(mediaGroup);
                    } else {
                        await ctx.reply(`üë§ *${raterProfile.name}*, ${raterProfile.age} –ª–µ—Ç\nüåÜ ${raterProfile.city}\n‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞: ${rating.rating}/10\n${raterProfile.username ? `üì± –ü—Ä–æ—Ñ–∏–ª—å @${raterProfile.username}\n` : ''}`, {
                            parse_mode: 'MarkdownV2',
                            reply_markup: {
                                inline_keyboard: [[
                                    { text: '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ', callback_data: 'show_next_rating' }
                                ]]
                            }
                        });
                    }
                    currentIndex++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã
                }
            } else {
                currentIndex++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏
                await showNextRating(); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
            }
        };

        await showNextRating(); // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã

        bot.action('show_next_rating', async (ctx) => {
            await ctx.answerCbQuery(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            await showNextRating(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ü–µ–Ω–æ–∫.');
    }
};

exports.globalRatingCommand = async (ctx) => {
    try {
        const user = await db.getUserProfile(ctx.from.id);
        const currentRound = await db.getCurrentGlobalRound();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã
        const isBlocked = user.last_global_win && 
            (new Date(user.last_global_win).getTime() + 2 * 60 * 60 * 1000 > Date.now());
        
        const minutesLeft = isBlocked ? 
            Math.ceil((new Date(user.last_global_win).getTime() + 2 * 60 * 60 * 1000 - Date.now()) / 60000) : 0;

        let message = `üåç *–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞*\n\n`;
        message += `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: 50 –º–æ–Ω–µ—Ç\n`;
        message += `üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.coins} –º–æ–Ω–µ—Ç\n\n`;
        message += `üèÜ –ü—Ä–∏–∑—ã:\n`;
        message += `1 –º–µ—Å—Ç–æ: 500 –º–æ–Ω–µ—Ç\n`;
        message += `2 –º–µ—Å—Ç–æ: 300 –º–æ–Ω–µ—Ç\n`;
        message += `3 –º–µ—Å—Ç–æ: 100 –º–æ–Ω–µ—Ç\n`;

        const keyboard = {
            reply_markup: {
                inline_keyboard: []
            }
        };

        if (currentRound && user.in_global_rating) {
            const timeLeft = Math.ceil((new Date(currentRound.rating_end_time).getTime() - Date.now()) / 60000);
            message += `\n‚è∞ –î–æ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞: ${timeLeft} –º–∏–Ω—É—Ç`;
            message += `\n\n‚è≥ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –æ—Ü–µ–Ω–∫–µ...`;
        } else if (!currentRound) {
            if (isBlocked) {
                message += `\n\n‚ö†Ô∏è –í—ã –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–±–µ–¥–∏–ª–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ!\n`;
                message += `‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${minutesLeft} –º–∏–Ω—É—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è.`;
            } else if (user.coins >= 50) {
                message += '\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥!';
                keyboard.reply_markup.inline_keyboard.push([
                    { text: 'üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞ 50 –º–æ–Ω–µ—Ç', callback_data: 'join_global' }
                ]);
            } else {
                message += '\n\n‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è';
            }
        }

        await ctx.reply(message, {
            parse_mode: 'Markdown',
            ...keyboard
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.');
    }
};

exports.balanceCommand = async (ctx) => {
    try {
        const user = await db.getUserProfile(ctx.from.id);
        if (!user) {
            return ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        }

        const balanceText = `üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.coins} –º–æ–Ω–µ—Ç*`;
        await ctx.reply(balanceText, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞.');
    }
};

async function startGlobalRating(ctx) {
    const user = await db.getUserProfile(ctx.from.id);

    const isBlocked = user.last_global_win && 
        (new Date(user.last_global_win).getTime() + 2 * 60 * 60 * 1000 > Date.now());

    if (isBlocked) {
        const minutesLeft = Math.ceil((new Date(user.last_global_win).getTime() + 2 * 60 * 60 * 1000 - Date.now()) / 60000);
        return ctx.reply(`–í—ã –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–±–µ–¥–∏–ª–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${minutesLeft} –º–∏–Ω—É—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è.`);
    }

    if (user.coins < 50) {
        return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è!');
    }

    try {
        await db.joinGlobalRating(ctx.from.id);
        await ctx.answerCbQuery('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ!');
        await ctx.reply('–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ.');
    }
}

async function finishGlobalRound() {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');

        await client.query(`
            UPDATE global_rounds 
            SET is_active = false 
            WHERE is_active = true
        `);

        const topParticipants = await client.query(`
            SELECT u.*, COUNT(gv.voter_id) as votes_count
            FROM users u
            LEFT JOIN global_votes gv ON gv.candidate_id = u.user_id
            WHERE u.in_global_rating = true
            GROUP BY u.user_id
            ORDER BY votes_count DESC, RANDOM()
            LIMIT 10
        `);

        for (let i = 0; i < topParticipants.rows.length; i++) {
            const participant = topParticipants.rows[i];
            const coins = i === 0 ? 500 : i === 1 ? 300 : i === 2 ? 100 : 0;

            if (coins > 0) {
                await client.query(`
                    UPDATE users 
                    SET coins = coins + $1,
                        last_global_win = CASE 
                            WHEN $2 <= 2 THEN NOW() 
                            ELSE last_global_win 
                        END
                    WHERE user_id = $3
                `, [coins, i, participant.user_id]);
            }
        }

        await client.query(`UPDATE users SET in_global_rating = false WHERE in_global_rating = true`);
        await client.query(`DELETE FROM global_votes`);

        await client.query('COMMIT');
        return topParticipants.rows;
    } catch (error) {
        await client.query('ROLLBACK');
        throw error;
    } finally {
        client.release();
    }
}

exports.startGlobalRating = startGlobalRating;

exports.viewProfileCommand = async (ctx) => {
    const userId = ctx.callbackQuery.data.split('_')[2];
    const profile = await db.getUserProfile(userId);
    
    if (profile) {
        const profileText = `üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*\nüìù –ò–º—è: ${profile.name}\nüéÇ –í–æ–∑—Ä–∞—Å—Ç: ${profile.age}\nüåÜ –ì–æ—Ä–æ–¥: ${profile.city}\n${profile.description ? `üìÑ –û —Å–µ–±–µ: ${profile.description}` : ''}`;
        
        const photos = await db.getUserPhotos(userId);
        if (photos.length > 0) {
            const mediaGroup = photos.map((photoId, index) => ({
                type: 'photo',
                media: photoId,
                ...(index === 0 && { caption: profileText, parse_mode: 'Markdown' })
            }));
            await ctx.replyWithMediaGroup(mediaGroup);
        } else {
            await ctx.reply(profileText, { parse_mode: 'Markdown' });
        }
    } else {
        await ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
};

exports.registerBotActions = (bot) => {
    bot.action(/^rate_(\d+)_(\d+)$/, async (ctx) => {
        try {
            const [, targetId, rating] = ctx.match.map(Number);
            
            const existingRating = await db.getRating(targetId, ctx.from.id);
            if (existingRating) {
                await ctx.answerCbQuery('–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç—É –∞–Ω–∫–µ—Ç—É!');
                return;
            }

            await db.saveRating(targetId, ctx.from.id, rating);
            await ctx.answerCbQuery('–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');

            // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
            const nextProfile = await db.getNextProfile(ctx.from.id);
            if (!nextProfile) {
                await ctx.reply('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! üòä', mainMenu);
                return;
            }

            // –ï—Å–ª–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É (7-10), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É
            if (rating >= 7) {
                const myProfile = await db.getUserProfile(ctx.from.id);
                const photos = await db.getUserPhotos(ctx.from.id);
                
                // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
                const escapedName = myProfile.name.replace(/([_*[\]()~`>#+\-.!])/g, '\\$1');
                const escapedCity = myProfile.city.replace(/([_*[\]()~`>#+\-.!])/g, '\\$1');
                const escapedDescription = myProfile.description ? 
                    myProfile.description.replace(/([_*[\]()~`>#+\-.!])/g, '\\$1') : '';
                const escapedUsername = ctx.from.username ? 
                    ctx.from.username.replace(/([_*[\]()~`>#+\-.!])/g, '\\$1') : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';

                const profileText = `ÔøΩÔøΩ –í–∞—Å –≤—ã—Å–æ–∫–æ –æ—Ü–µ–Ω–∏–ª–∏!\n\n` +
                                  `üë§ –ü—Ä–æ—Ñ–∏–ª—å —Ç–æ–≥–æ, –∫—Ç–æ –≤–∞—Å –æ—Ü–µ–Ω–∏–ª:\n` +
                                  `üìù –ò–º—è: ${escapedName}\n` +
                                  `üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${myProfile.age}\n` +
                                  `üåÜ –ì–æ—Ä–æ–¥: ${escapedCity}\n` +
                                  `${escapedDescription ? `\nüìÑ –û —Å–µ–±–µ: ${escapedDescription}` : ''}\n\n` +
                                  `üì± Telegram: @${escapedUsername}`;

                if (photos.length > 0) {
                    const mediaGroup = photos.map((photoId, index) => ({
                        type: 'photo',
                        media: photoId,
                        ...(index === 0 && { 
                            caption: `ÔøΩÔøΩ –í–∞—Å –≤—ã—Å–æ–∫–æ –æ—Ü–µ–Ω–∏–ª–∏!\n\n` +
                                    `üë§ –ü—Ä–æ—Ñ–∏–ª—å —Ç–æ–≥–æ, –∫—Ç–æ –≤–∞—Å –æ—Ü–µ–Ω–∏–ª:\n` +
                                    `üìù –ò–º—è: ${escapedName}\n` +
                                    `üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${myProfile.age}\n` +
                                    `üåÜ –ì–æ—Ä–æ–¥: ${escapedCity}\n` +
                                    `${escapedDescription ? `\nüìÑ –û —Å–µ–±–µ: ${escapedDescription}` : ''}\n\n` +
                                    `üì± Telegram: @${escapedUsername}`,
                            parse_mode: 'Markdown'
                        })
                    }));
                    await ctx.telegram.sendMediaGroup(targetId, mediaGroup);
                } else {
                    await ctx.telegram.sendMessage(targetId, profileText, { parse_mode: 'Markdown' });
                }
            }

            // –ï—Å–ª–∏ –º–µ–Ω—è –∫—Ç–æ-—Ç–æ –æ—Ü–µ–Ω–∏–ª –≤—ã—Å–æ–∫–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∞–Ω–∫–µ—Ç—É
            const highRatingsForMe = await db.getHighRatingsForUser(ctx.from.id);
            if (highRatingsForMe.length > 0) {
                for (const rating of highRatingsForMe) {
                    const raterProfile = await db.getUserProfile(rating.from_user_id);
                    const raterPhotos = await db.getUserPhotos(rating.from_user_id);

                    const raterProfileText = `üéâ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–ª –≤–∞—Å –Ω–∞ ${rating.rating}/10!\n\n` +
                                          `üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*\n` +
                                          `üìù –ò–º—è: ${raterProfile.name}\n` +
                                          `üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${raterProfile.age}\n` +
                                          `üåÜ –ì–æ—Ä–æ–¥: ${raterProfile.city}\n` +
                                          `${raterProfile.description ? `\nüìÑ –û —Å–µ–±–µ: ${raterProfile.description}` : ''}\n\n` +
                                          `üì± Telegram: @${raterProfile.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`;

                    if (raterPhotos.length > 0) {
                        const mediaGroup = raterPhotos.map((photoId, index) => ({
                            type: 'photo',
                            media: photoId,
                            ...(index === 0 && { caption: raterProfileText, parse_mode: 'Markdown' })
                        }));
                        await ctx.replyWithMediaGroup(mediaGroup);
                    } else {
                        await ctx.reply(raterProfileText, { parse_mode: 'Markdown' });
                    }
                }
                // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
                await db.clearProcessedHighRatings(ctx.from.id);
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            await sendProfileForRating(ctx, nextProfile);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏:', error);
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏');
        }
    });
};