require('dotenv').config();
const { Telegraf, Scenes, session } = require('telegraf');
const { message } = require('telegraf/filters');
const config = require('./config');
const db = require('./db');

const bot = new Telegraf(config.BOT_TOKEN);

// –°—Ü–µ–Ω—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const registrationScene = new Scenes.WizardScene(
    'registration',
    // –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
    async (ctx) => {
        await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, 2-30 —Å–∏–º–≤–æ–ª–æ–≤)');
        return ctx.wizard.next();
    },
    // –®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–∞
    async (ctx) => {
        const name = ctx.message.text.trim();
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏: —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, 2-30 —Å–∏–º–≤–æ–ª–æ–≤
        if (!name.match(/^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s]{2,30}$/)) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, 2-30 —Å–∏–º–≤–æ–ª–æ–≤)');
            return;
        }
        ctx.wizard.state.name = name;
        await ctx.reply('–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (18-100)');
        return ctx.wizard.next();
    },
    // –®–∞–≥ 3: –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞
    async (ctx) => {
        const age = parseInt(ctx.message.text);
        if (isNaN(age) || age < 18 || age > 100) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (18-100)');
            return;
        }
        ctx.wizard.state.age = age;
        await ctx.reply('–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞? (2-50 —Å–∏–º–≤–æ–ª–æ–≤)');
        return ctx.wizard.next();
    },
    // –®–∞–≥ 4: –ó–∞–ø—Ä–æ—Å –ø–æ–ª–∞
    async (ctx) => {
        const city = ctx.message.text.trim();
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞: 2-50 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å
        if (!city.match(/^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s-]{2,50}$/)) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (2-50 —Å–∏–º–≤–æ–ª–æ–≤)');
            return;
        }
        ctx.wizard.state.city = city;
        await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:', {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–ú—É–∂—Å–∫–æ–π ‚ôÇÔ∏è', callback_data: 'gender_male' },
                        { text: '–ñ–µ–Ω—Å–∫–∏–π ‚ôÄÔ∏è', callback_data: 'gender_female' }
                    ]
                ]
            }
        });
        return ctx.wizard.next();
    },
    // –ù–æ–≤—ã–π —à–∞–≥: –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    async (ctx) => {
        if (!ctx.callbackQuery || !['gender_male', 'gender_female'].includes(ctx.callbackQuery.data)) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ');
            return;
        }
        const gender = ctx.callbackQuery.data === 'gender_male' ? 'male' : 'female';
        ctx.wizard.state.gender = gender;
        
        await ctx.reply('–ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?', {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–ü–∞—Ä–Ω–µ–π ‚ôÇÔ∏è', callback_data: 'pref_male' },
                        { text: '–î–µ–≤—É—à–µ–∫ ‚ôÄÔ∏è', callback_data: 'pref_female' }
                    ],
                    [{ text: '–ù–µ–≤–∞–∂–Ω–æ ü§ù', callback_data: 'pref_any' }]
                ]
            }
        });
        return ctx.wizard.next();
    },
    // –®–∞–≥ 5: –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)
    async (ctx) => {
        if (!ctx.callbackQuery || !['pref_male', 'pref_female', 'pref_any'].includes(ctx.callbackQuery.data)) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ');
            return;
        }
        
        const preferences = ctx.callbackQuery.data === 'pref_male' ? 'male' : 
                           ctx.callbackQuery.data === 'pref_female' ? 'female' : 'any';
        ctx.wizard.state.preferences = preferences;
        
        ctx.wizard.state.photos = [];
        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–º–∏–Ω–∏–º—É–º 1, –º–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ)');
        return ctx.wizard.next();
    },
    // –®–∞–≥ 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    async (ctx) => {
        if (ctx.message?.photo) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
            const photo = ctx.message.photo[ctx.message.photo.length - 1];
            if (photo.file_size && photo.file_size > 5242880) { // 5MB
                await ctx.reply('–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 5MB');
                return;
            }
            
            const photoId = photo.file_id;
            ctx.wizard.state.photos.push(photoId);
            
            const buttons = [];
            if (ctx.wizard.state.photos.length < 3) {
                buttons.push([{ text: '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ', callback_data: 'more_photo' }]);
            }
            if (ctx.wizard.state.photos.length >= 1) {
                buttons.push([{ text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: 'continue_registration' }]);
            }

            await ctx.reply(`–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! (${ctx.wizard.state.photos.length}/3)`, {
                reply_markup: {
                    inline_keyboard: buttons
                }
            });
        } else if (ctx.callbackQuery) {
            if (ctx.callbackQuery.data === 'more_photo') {
                await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ');
                return;
            } else if (ctx.callbackQuery.data === 'continue_registration') {
                if (ctx.wizard.state.photos.length === 0) {
                    await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ');
                    return;
                }
                await ctx.reply('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"', {
                    reply_markup: {
                        inline_keyboard: [[
                            { text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_description' }
                        ]]
                    }
                });
                return ctx.wizard.next();
            }
        }
    },
    // –®–∞–≥ 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    async (ctx) => {
        if (ctx.callbackQuery && ctx.callbackQuery.data === 'skip_description') {
            ctx.wizard.state.description = '';
        } else if (ctx.message?.text) {
            const description = ctx.message.text.trim();
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
            if (description.length > 500) {
                await ctx.reply('–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤');
                return;
            }
            ctx.wizard.state.description = description;
        } else {
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = {
            telegramId: ctx.from.id,
            name: ctx.wizard.state.name,
            age: ctx.wizard.state.age,
            city: ctx.wizard.state.city,
            gender: ctx.wizard.state.gender,
            preferences: ctx.wizard.state.preferences,
            photos: ctx.wizard.state.photos,
            description: ctx.wizard.state.description
        };

        try {
            await db.saveUserProfile(userData);
            await ctx.reply('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', mainMenu);
            return ctx.scene.leave();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return ctx.scene.leave();
        }
    }
);

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
const editProfileScene = new Scenes.WizardScene(
    'edit_profile',
    // –®–∞–≥ 1: –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –≤—ã–±–æ—Ä —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    async (ctx) => {
        const user = await db.getUserProfile(ctx.from.id);
        if (!user) {
            await ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return ctx.scene.leave();
        }

        await ctx.reply('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìù –ò–º—è', callback_data: 'edit_name' }],
                    [{ text: 'üéÇ –í–æ–∑—Ä–∞—Å—Ç', callback_data: 'edit_age' }],
                    [{ text: 'üåÜ –ì–æ—Ä–æ–¥', callback_data: 'edit_city' }],
                    [{ text: 'üìÑ –û–ø–∏—Å–∞–Ω–∏–µ', callback_data: 'edit_description' }],
                    [{ text: 'üñº –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', callback_data: 'edit_photos' }],
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_edit' }]
                ]
            }
        });
        return ctx.wizard.next();
    },
    // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    async (ctx) => {
        if (!ctx.callbackQuery) return;

        const action = ctx.callbackQuery.data;
        ctx.wizard.state.editField = action;

        if (action === 'cancel_edit') {
            await ctx.reply('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', mainMenu);
            return ctx.scene.leave();
        }

        switch (action) {
            case 'edit_name':
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, 2-30 —Å–∏–º–≤–æ–ª–æ–≤):');
                break;
            case 'edit_age':
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (18-100):');
                break;
            case 'edit_city':
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ (2-50 —Å–∏–º–≤–æ–ª–æ–≤):');
                break;
            case 'edit_description':
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"', {
                    reply_markup: {
                        inline_keyboard: [[
                            { text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_description' }
                        ]]
                    }
                });
                break;
            case 'edit_photos':
                ctx.wizard.state.photos = [];
                await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–º–∏–Ω–∏–º—É–º 1, –º–∞–∫—Å–∏–º—É–º 3). –°—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã.');
                break;
        }
        return ctx.wizard.next();
    },
    // –®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    async (ctx) => {
        const editField = ctx.wizard.state.editField;

        try {
            switch (editField) {
                case 'edit_name':
                    const name = ctx.message.text.trim();
                    if (!name.match(/^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s]{2,30}$/)) {
                        await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                        return;
                    }
                    await db.updateUserField(ctx.from.id, 'name', name);
                    break;

                case 'edit_age':
                    const age = parseInt(ctx.message.text);
                    if (isNaN(age) || age < 18 || age > 100) {
                        await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                        return;
                    }
                    await db.updateUserField(ctx.from.id, 'age', age);
                    break;

                case 'edit_city':
                    const city = ctx.message.text.trim();
                    if (!city.match(/^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s-]{2,50}$/)) {
                        await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                        return;
                    }
                    await db.updateUserField(ctx.from.id, 'city', city);
                    break;

                case 'edit_description':
                    if (ctx.callbackQuery?.data === 'skip_description') {
                        await db.updateUserField(ctx.from.id, 'description', '');
                    } else {
                        const description = ctx.message.text.trim();
                        if (description.length > 500) {
                            await ctx.reply('–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                            return;
                        }
                        await db.updateUserField(ctx.from.id, 'description', description);
                    }
                    break;

                case 'edit_photos':
                    if (ctx.message?.photo) {
                        const photo = ctx.message.photo[ctx.message.photo.length - 1];
                        if (photo.file_size && photo.file_size > 5242880) {
                            await ctx.reply('–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 5MB');
                            return;
                        }
                        
                        ctx.wizard.state.photos.push(photo.file_id);
                        
                        const buttons = [];
                        if (ctx.wizard.state.photos.length < 3) {
                            buttons.push([{ text: '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ', callback_data: 'more_photo' }]);
                        }
                        if (ctx.wizard.state.photos.length >= 1) {
                            buttons.push([{ text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: 'save_photos' }]);
                        }

                        await ctx.reply(`–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! (${ctx.wizard.state.photos.length}/3)`, {
                            reply_markup: {
                                inline_keyboard: buttons
                            }
                        });
                        return;
                    } else if (ctx.callbackQuery) {
                        if (ctx.callbackQuery.data === 'more_photo') {
                            await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ');
                            return;
                        } else if (ctx.callbackQuery.data === 'save_photos') {
                            await db.updateUserPhotos(ctx.from.id, ctx.wizard.state.photos);
                        }
                    }
                    break;
            }

            await ctx.reply('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', mainMenu);
            return ctx.scene.leave();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
            return ctx.scene.leave();
        }
    }
);

// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ü–µ–Ω
const stage = new Scenes.Stage([registrationScene, editProfileScene]);
bot.use(session());
bot.use(stage.middleware());

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const mainMenu = {
    reply_markup: {
        keyboard: [
            ['üîç –ù–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å', 'üëë –õ–∏–¥–µ—Ä—ã'],
            ['üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí∞ –ë–∞–ª–∞–Ω—Å'],
            ['üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥']
        ],
        resize_keyboard: true
    }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.command('start', async (ctx) => {
    const user = await db.getUserProfile(ctx.from.id);
    if (!user) {
        await ctx.scene.enter('registration');
    } else {
        await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', mainMenu);
    }
});

bot.hears('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', async (ctx) => {
    try {
        const user = await db.getUserProfile(ctx.from.id);
        const photos = await db.getUserPhotos(ctx.from.id);
        
        if (!user) {
            return ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        }

        const profileText = `üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*
üìù –ò–º—è: ${user.name}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${user.age}
üåÜ –ì–æ—Ä–æ–¥: ${user.city}
üë• –ü–æ–ª: ${user.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}
${user.description ? `\nüìÑ –û —Å–µ–±–µ: ${user.description}` : ''}`;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const editButton = {
            reply_markup: {
                inline_keyboard: [[
                    { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'edit_profile' }
                ]]
            }
        };

        if (photos.length > 0) {
            const mediaGroup = photos.map((photoId, index) => ({
                type: 'photo',
                media: photoId,
                ...(index === 0 && { caption: profileText, parse_mode: 'Markdown' })
            }));
            await ctx.replyWithMediaGroup(mediaGroup);
            await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º:', editButton);
        } else {
            await ctx.reply(profileText, { 
                parse_mode: 'Markdown',
                ...editButton
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å"
bot.hears('üîç –ù–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å', async (ctx) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        const profiles = await db.getProfilesForRating(ctx.from.id);
        
        if (!profiles || profiles.length === 0) {
            return ctx.reply('–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await sendProfileForRating(ctx, profiles[0]);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–õ–∏–¥–µ—Ä—ã"
bot.hears('üëë –õ–∏–¥–µ—Ä—ã', async (ctx) => {
    try {
        const winners = await db.getCurrentRoundWinners();
        if (!winners || winners.length === 0) {
            return ctx.reply('–ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ.');
        }

        let leaderboardText = 'üèÜ *–¢–µ–∫—É—â–∏–µ –ª–∏–¥–µ—Ä—ã:*\n\n';
        winners.forEach((winner, index) => {
            const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üë§';
            leaderboardText += `${medal} ${winner.name}\n` +
                             `‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: ${Number(winner.average_rating).toFixed(2)}\n` +
                             `üí∞ –ú–æ–Ω–µ—Ç: ${winner.coins || 0}\n` +
                             `${winner.coins_received ? `üíµ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞ –º–µ—Å—Ç–æ: ${winner.coins_received}\n` : ''}` +
                             `\n`;
        });

        await ctx.reply(leaderboardText, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–µ—Ä–æ–≤:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–µ—Ä–æ–≤.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å"
bot.hears('üí∞ –ë–∞–ª–∞–Ω—Å', async (ctx) => {
    try {
        const user = await db.getUserProfile(ctx.from.id);
        if (!user) {
            return ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        }

        const wins = await db.getWinsCount(ctx.from.id);
        const rating = user.average_rating ? Number(user.average_rating).toFixed(2) : '0.00';
        const totalRating = user.total_rating || 0;

        const balanceText = `üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:* ${user.coins || 0} –º–æ–Ω–µ—Ç\n\n` +
            `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
            `üèÜ –ü–æ–±–µ–¥: ${wins}\n` +
            `‚≠êÔ∏è –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${rating}\n` +
            `üìà –°—É–º–º–∞ –≤—Å–µ—Ö –æ—Ü–µ–Ω–æ–∫: ${totalRating}\n\n` +
            `‚ÑπÔ∏è –°–ª–µ–¥—É—é—â–µ–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ ${user.last_win_time ? 
                `–¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ ${getTimeUntilNextRating(user.last_win_time)}` : 
                '–¥–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å'}`;

        await ctx.reply(balanceText, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
bot.hears('üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥', async (ctx) => {
    try {
        const user = await db.getUserProfile(ctx.from.id);
        
        if (!user) {
            return ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        }

        if (user.in_global_rating) {
            return ctx.reply('–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞.');
        }

        if (user.last_global_win && Date.now() - new Date(user.last_global_win).getTime() < 24 * 60 * 60 * 1000) {
            return ctx.reply('–í—ã –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–±–µ–¥–∏–ª–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ. –°–ª–µ–¥—É—é—â–µ–µ —É—á–∞—Å—Ç–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.');
        }

        const joinMessage = `üåç *–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥*\n\n` +
            `–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: 50 –º–æ–Ω–µ—Ç\n` +
            `–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: 500 –º–æ–Ω–µ—Ç\n\n` +
            `–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.coins} –º–æ–Ω–µ—Ç\n\n` +
            `–ü–æ—Å–ª–µ –ø–æ–±–µ–¥—ã –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω –≤ 0.`;

        await ctx.reply(joinMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [[
                    { text: 'üí´ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', callback_data: 'join_global_rating' }
                ]]
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ
bot.action('join_global_rating', async (ctx) => {
    try {
        const result = await db.joinGlobalRating(ctx.from.id);
        
        if (result) {
            await ctx.answerCbQuery('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É!');
            await ctx.reply('–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ!\n' +
                          '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.\n' +
                          '–£–¥–∞—á–∏! üçÄ');
        } else {
            await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è!');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –æ—Ü–µ–Ω–∫—É
async function sendProfileForRating(ctx, profile) {
    const profileText = `üë§ *–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:*\n` +
        `üìù –ò–º—è: ${profile.name}\n` +
        `üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${profile.age}\n` +
        `üåÜ –ì–æ—Ä–æ–¥: ${profile.city}\n` +
        `${profile.description ? `üìÑ –û —Å–µ–±–µ: ${profile.description}\n` : ''}`;

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = profile.user_id; // –ò–∑–º–µ–Ω–µ–Ω–æ —Å profile.telegramId –Ω–∞ profile.user_id

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ü–µ–Ω–∫–∞–º–∏
    const ratingKeyboard = {
        inline_keyboard: [
            [
                { text: '1Ô∏è‚É£', callback_data: `rate_1_${userId}` },
                { text: '2Ô∏è‚É£', callback_data: `rate_2_${userId}` },
                { text: '3Ô∏è‚É£', callback_data: `rate_3_${userId}` },
                { text: '4Ô∏è‚É£', callback_data: `rate_4_${userId}` },
                { text: '5Ô∏è‚É£', callback_data: `rate_5_${userId}` }
            ],
            [
                { text: '6Ô∏è‚É£', callback_data: `rate_6_${userId}` },
                { text: '7Ô∏è‚É£', callback_data: `rate_7_${userId}` },
                { text: '8Ô∏è‚É£', callback_data: `rate_8_${userId}` },
                { text: '9Ô∏è‚É£', callback_data: `rate_9_${userId}` },
                { text: 'üîü', callback_data: `rate_10_${userId}` }
            ],
            [{ text: '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: `skip_${userId}` }]
        ]
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
    if (profile.photos && profile.photos.length > 0) {
        const mediaGroup = profile.photos.map((photoId, index) => ({
            type: 'photo',
            media: photoId,
            ...(index === 0 && { caption: profileText, parse_mode: 'Markdown' })
        }));

        await ctx.replyWithMediaGroup(mediaGroup);
        await ctx.reply('–û—Ü–µ–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É:', { reply_markup: ratingKeyboard });
    } else {
        await ctx.reply(profileText, {
            parse_mode: 'Markdown',
            reply_markup: ratingKeyboard
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ü–µ–Ω–æ–∫ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)
bot.action(/^rate_(\d+)_(\d+)$/, async (ctx) => {
    try {
        const [, rating, targetId] = ctx.match;
        console.log('Rating:', rating, 'Target ID:', targetId);

        await db.saveRating(parseInt(targetId), ctx.from.id, parseInt(rating));
        await ctx.answerCbQuery('‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã—Å–æ–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫
        if (parseInt(rating) >= 7) {
            const ratedUser = await db.getUserProfile(parseInt(targetId));
            const ratedUserPhotos = await db.getUserPhotos(parseInt(targetId));
            
            const matchText = `üåü *–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!*\n\n` +
                `–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n` +
                `üë§ *${ratedUser.name}*\n` +
                `üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${ratedUser.age}\n` +
                `üåÜ –ì–æ—Ä–æ–¥: ${ratedUser.city}\n` +
                `${ratedUser.username ? `üë§ Username: @${ratedUser.username}\n` : ''}`+
                `${ratedUser.description ? `üìÑ –û —Å–µ–±–µ: ${ratedUser.description}\n` : ''}\n` +
                `–ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! üòä`;

            if (ratedUserPhotos.length > 0) {
                const mediaGroup = ratedUserPhotos.map((photoId, index) => ({
                    type: 'photo',
                    media: photoId,
                    ...(index === 0 && { caption: matchText, parse_mode: 'Markdown' })
                }));
                await ctx.replyWithMediaGroup(mediaGroup);
            } else {
                await ctx.reply(matchText, { parse_mode: 'Markdown' });
            }
        }
        
        const nextProfile = await db.getNextProfile(ctx.from.id);
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if (ctx.callbackQuery.message) {
            try {
                await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
            } catch (error) {
                console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            }
        }
        
        if (nextProfile) {
            await sendProfileForRating(ctx, nextProfile);
        } else {
            await ctx.reply('–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏.');
    }
});

// –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
bot.action(/^skip_(\d+)$/, async (ctx) => {
    try {
        await ctx.answerCbQuery();
        const nextProfile = await db.getNextProfile(ctx.from.id);
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
        }
        
        if (nextProfile) {
            await sendProfileForRating(ctx, nextProfile);
        } else {
            await ctx.reply('–ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.');
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
function startWinnersUpdate() {
    setInterval(async () => {
        try {
            const winners = await db.updateWinners();
            const winnersList = await db.getCurrentRoundWinners();
            
            if (winnersList && winnersList.length > 0) {
                let message = 'üèÜ *–ò—Ç–æ–≥–∏ —Ä–∞—É–Ω–¥–∞:*\n\n';
                winnersList.forEach((winner, index) => {
                    const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üë§';
                    message += `${medal} ${winner.place}. ${winner.name}\n` +
                              `‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: ${winner.average_rating.toFixed(2)}\n` +
                              `üí∞ –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: ${winner.coins_received}\n\n`;
                });
                
                // TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–ª–∏ –≤ –∫–∞–Ω–∞–ª
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:', error);
        }
    }, 10000); // 10 —Å–µ–∫—É–Ω–¥
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
function startGlobalRatingUpdate() {
    setInterval(async () => {
        try {
            const winner = await db.updateGlobalWinner();
            
            if (winner) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
                await bot.telegram.sendMessage(winner.user_id,
                    'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ!\n' +
                    'üí∞ –ù–∞ –≤–∞—à —Å—á–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ 500 –º–æ–Ω–µ—Ç!\n' +
                    '‚ö†Ô∏è –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–∏—è.'
                );
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
        }
    }, 24 * 60 * 60 * 1000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    startWinnersUpdate();
    startGlobalRatingUpdate(); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
}).catch((err) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–∏—è
function getTimeUntilNextRating(lastWinTime) {
    const nextAvailableTime = new Date(lastWinTime);
    nextAvailableTime.setHours(nextAvailableTime.getHours() + 2);
    
    const now = new Date();
    const diff = nextAvailableTime - now;
    
    if (diff <= 0) return '—Å–µ–π—á–∞—Å';
    
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    
    return `${hours}—á ${minutes}–º`;
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
bot.action('edit_profile', async (ctx) => {
    await ctx.scene.enter('edit_profile');
});
