require('dotenv').config();
const { Telegraf, Scenes, session } = require('telegraf');
const { message } = require('telegraf/filters');
const config = require('./config');
const db = require('./db');

const bot = new Telegraf(config.BOT_TOKEN);

// Validation functions
const validators = {
    name: (name) => {
        return typeof name === 'string' && 
               name.match(/^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s]{2,30}$/);
    },
    
    age: (age) => {
        const parsedAge = parseInt(age);
        return !isNaN(parsedAge) && parsedAge >= 14 && parsedAge <= 99;
    },
    
    city: (city) => {
        return typeof city === 'string' && 
               city.match(/^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s-]{2,50}$/);
    },
    
    description: (desc) => {
        return typeof desc === 'string' && 
               desc.length <= 500;
    },
    
    photo: (photo) => {
        return photo && 
               (!photo.file_size || photo.file_size <= 5242880); // 5MB
    }
};

// –°—Ü–µ–Ω—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const registrationScene = new Scenes.WizardScene(
    'registration',
    // –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
    async (ctx) => {
        await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, 2-30 —Å–∏–º–≤–æ–ª–æ–≤)');
        return ctx.wizard.next();
    },
    // –®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–∞
    async (ctx) => {
        const name = ctx.message.text.trim();
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏: —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, 2-30 —Å–∏–º–≤–æ–ª–æ–≤
        if (!name.match(/^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s]{2,30}$/)) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, 2-30 —Å–∏–º–≤–æ–ª–æ–≤)');
            return;
        }
        ctx.wizard.state.name = name;
        await ctx.reply('–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (14-99)');
        return ctx.wizard.next();
    },
    // –®–∞–≥ 3: –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞
    async (ctx) => {
        const age = parseInt(ctx.message.text);
        if (isNaN(age) || age < 14 || age > 99) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (14-99)');
            return;
        }
        ctx.wizard.state.age = age;
        await ctx.reply('–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞? (2-50 —Å–∏–º–≤–æ–ª–æ–≤)');
        return ctx.wizard.next();
    },
    // –®–∞–≥ 4: –ó–∞–ø—Ä–æ—Å –ø–æ–ª–∞
    async (ctx) => {
        const city = ctx.message.text.trim();
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞: 2-50 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å
        if (!city.match(/^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s-]{2,50}$/)) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (2-50 —Å–∏–º–≤–æ–ª–æ–≤)');
            return;
        }
        ctx.wizard.state.city = city;
        await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:', {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–ú—É–∂—Å–∫–æ–π ‚ôÇÔ∏è', callback_data: 'gender_male' },
                        { text: '–ñ–µ–Ω—Å–∫–∏–π ‚ôÄÔ∏è', callback_data: 'gender_female' }
                    ]
                ]
            }
        });
        return ctx.wizard.next();
    },
    // –ù–æ–≤—ã–π —à–∞–≥: –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    async (ctx) => {
        if (!ctx.callbackQuery || !['gender_male', 'gender_female'].includes(ctx.callbackQuery.data)) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ');
            return;
        }
        const gender = ctx.callbackQuery.data === 'gender_male' ? 'male' : 'female';
        ctx.wizard.state.gender = gender;
        
        await ctx.reply('–ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?', {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–ü–∞—Ä–Ω–µ–π ‚ôÇÔ∏è', callback_data: 'pref_male' },
                        { text: '–î–µ–≤—É—à–µ–∫ ‚ôÄÔ∏è', callback_data: 'pref_female' }
                    ],
                    [{ text: '–ù–µ–≤–∞–∂–Ω–æ ü§ù', callback_data: 'pref_any' }]
                ]
            }
        });
        return ctx.wizard.next();
    },
    // –®–∞–≥ 5: –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)
    async (ctx) => {
        if (!ctx.callbackQuery || !['pref_male', 'pref_female', 'pref_any'].includes(ctx.callbackQuery.data)) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ');
            return;
        }
        
        const preferences = ctx.callbackQuery.data === 'pref_male' ? 'male' : 
                           ctx.callbackQuery.data === 'pref_female' ? 'female' : 'any';
        ctx.wizard.state.preferences = preferences;
        
        ctx.wizard.state.photos = [];
        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–º–∏–Ω–∏–º—É–º 1, –º–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ)');
        return ctx.wizard.next();
    },
    // –®–∞–≥ 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    async (ctx) => {
        if (ctx.message?.photo) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
            const photo = ctx.message.photo[ctx.message.photo.length - 1];
            if (photo.file_size && photo.file_size > 5242880) { // 5MB
                await ctx.reply('–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 5MB');
                return;
            }
            
            const photoId = photo.file_id;
            ctx.wizard.state.photos.push(photoId);
            
            const buttons = [];
            if (ctx.wizard.state.photos.length < 3) {
                buttons.push([{ text: '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ', callback_data: 'more_photo' }]);
            }
            if (ctx.wizard.state.photos.length >= 1) {
                buttons.push([{ text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: 'continue_registration' }]);
            }

            await ctx.reply(`–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! (${ctx.wizard.state.photos.length}/3)`, {
                reply_markup: {
                    inline_keyboard: buttons
                }
            });
        } else if (ctx.callbackQuery) {
            if (ctx.callbackQuery.data === 'more_photo') {
                await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ');
                return;
            } else if (ctx.callbackQuery.data === 'continue_registration') {
                if (ctx.wizard.state.photos.length === 0) {
                    await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ');
                    return;
                }
                await ctx.reply('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"', {
                    reply_markup: {
                        inline_keyboard: [[
                            { text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_description' }
                        ]]
                    }
                });
                return ctx.wizard.next();
            }
        }
    },
    // –®–∞–≥ 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    async (ctx) => {
        if (ctx.callbackQuery && ctx.callbackQuery.data === 'skip_description') {
            ctx.wizard.state.description = '';
        } else if (ctx.message?.text) {
            const description = ctx.message.text.trim();
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
            if (description.length > 500) {
                await ctx.reply('–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤');
                return;
            }
            ctx.wizard.state.description = description;
        } else {
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = {
            telegramId: ctx.from.id,
            name: ctx.wizard.state.name,
            age: ctx.wizard.state.age,
            city: ctx.wizard.state.city,
            gender: ctx.wizard.state.gender,
            preferences: ctx.wizard.state.preferences,
            photos: ctx.wizard.state.photos,
            description: ctx.wizard.state.description
        };

        try {
            await db.saveUserProfile(userData);
            await ctx.reply('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', mainMenu);
            return ctx.scene.leave();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return ctx.scene.leave();
        }
    }
);

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
const editProfileScene = new Scenes.WizardScene(
    'edit_profile',
    // –®–∞–≥ 1: –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –≤—ã–±–æ—Ä —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    async (ctx) => {
        const user = await db.getUserProfile(ctx.from.id);
        if (!user) {
            await ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return ctx.scene.leave();
        }

        await ctx.reply('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìù –ò–º—è', callback_data: 'edit_name' }],
                    [{ text: 'üéÇ –í–æ–∑—Ä–∞—Å—Ç', callback_data: 'edit_age' }],
                    [{ text: 'üåÜ –ì–æ—Ä–æ–¥', callback_data: 'edit_city' }],
                    [{ text: 'üìÑ –û–ø–∏—Å–∞–Ω–∏–µ', callback_data: 'edit_description' }],
                    [{ text: 'üñº –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', callback_data: 'edit_photos' }],
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_edit' }]
                ]
            }
        });
        return ctx.wizard.next();
    },
    // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    async (ctx) => {
        if (!ctx.callbackQuery) return;

        const action = ctx.callbackQuery.data;
        ctx.wizard.state.editField = action;

        if (action === 'cancel_edit') {
            await ctx.reply('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', mainMenu);
            return ctx.scene.leave();
        }

        switch (action) {
            case 'edit_name':
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, 2-30 —Å–∏–º–≤–æ–ª–æ–≤):');
                break;
            case 'edit_age':
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (14-99):');
                break;
            case 'edit_city':
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ (2-50 —Å–∏–º–≤–æ–ª–æ–≤):');
                break;
            case 'edit_description':
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"', {
                    reply_markup: {
                        inline_keyboard: [[
                            { text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_description' }
                        ]]
                    }
                });
                break;
            case 'edit_photos':
                ctx.wizard.state.photos = [];
                await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–º–∏–Ω–∏–º—É–º 1, –º–∞–∫—Å–∏–º—É–º 3). –°—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã.');
                break;
        }
        return ctx.wizard.next();
    },
    // –®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    async (ctx) => {
        const editField = ctx.wizard.state.editField;

        try {
            switch (editField) {
                case 'edit_name':
                    const name = ctx.message.text.trim();
                    if (!validators.name(name)) {
                        await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                        return;
                    }
                    await db.updateUserField(ctx.from.id, 'name', name);
                    break;

                case 'edit_age':
                    if (!validators.age(ctx.message.text)) {
                        await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                        return;
                    }
                    await db.updateUserField(ctx.from.id, 'age', parseInt(ctx.message.text));
                    break;

                case 'edit_city':
                    const city = ctx.message.text.trim();
                    if (!validators.city(city)) {
                        await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                        return;
                    }
                    await db.updateUserField(ctx.from.id, 'city', city);
                    break;

                case 'edit_description':
                    if (ctx.callbackQuery?.data === 'skip_description') {
                        await db.updateUserField(ctx.from.id, 'description', '');
                    } else {
                        const description = ctx.message.text.trim();
                        if (!validators.description(description)) {
                            await ctx.reply('–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                            return;
                        }
                        await db.updateUserField(ctx.from.id, 'description', description);
                    }
                    break;

                case 'edit_photos':
                    if (!ctx.message?.photo || !validators.photo(ctx.message.photo[ctx.message.photo.length - 1])) {
                        await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ç–æ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 5MB');
                        return;
                    }
                    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ ...
                    break;
            }

            await ctx.reply('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', mainMenu);
            return ctx.scene.leave();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return ctx.scene.leave();
        }
    }
);

// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ü–µ–Ω
const stage = new Scenes.Stage([registrationScene, editProfileScene]);
bot.use(session());
bot.use(stage.middleware());

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const mainMenu = {
    reply_markup: {
        keyboard: [
            ['üîç –ù–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å', 'üëë –õ–∏–¥–µ—Ä—ã'],
            ['üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí∞ –ë–∞–ª–∞–Ω—Å'],
            ['üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥', '‚≠êÔ∏è –ö—Ç–æ –º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª']
        ],
        resize_keyboard: true
    }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.command('start', async (ctx) => {
    const user = await db.getUserProfile(ctx.from.id);
    if (!user) {
        await ctx.scene.enter('registration');
    } else {
        await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', mainMenu);
    }
});

bot.hears('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', async (ctx) => {
    try {
        const user = await db.getUserProfile(ctx.from.id);
        const photos = await db.getUserPhotos(ctx.from.id);
        
        if (!user) {
            return ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        }

        const profileText = `üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*
üìù –ò–º—è: ${user.name}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${user.age}
üåÜ –ì–æ—Ä–æ–¥: ${user.city}
üë• –ü–æ–ª: ${user.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}
${user.description ? `\nüìÑ –û —Å–µ–±–µ: ${user.description}` : ''}`;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const editButton = {
            reply_markup: {
                inline_keyboard: [[
                    { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'edit_profile' }
                ]]
            }
        };

        if (photos.length > 0) {
            const mediaGroup = photos.map((photoId, index) => ({
                type: 'photo',
                media: photoId,
                ...(index === 0 && { caption: profileText, parse_mode: 'Markdown' })
            }));
            await ctx.replyWithMediaGroup(mediaGroup);
            await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º:', editButton);
        } else {
            await ctx.reply(profileText, { 
                parse_mode: 'Markdown',
                ...editButton
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å"
bot.hears('üîç –ù–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å', async (ctx) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        const profiles = await db.getProfilesForRating(ctx.from.id);
        
        if (!profiles || profiles.length === 0) {
            return ctx.reply('–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await sendProfileForRating(ctx, profiles[0]);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–õ–∏–¥–µ—Ä—ã"
bot.hears('üëë –õ–∏–¥–µ—Ä—ã', async (ctx) => {
    try {
        const winners = await db.getCurrentRoundWinners();
        if (!winners || winners.length === 0) {
            return ctx.reply('–ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ.');
        }

        let leaderboardText = 'üèÜ *–¢–µ–∫—É—â–∏–µ –ª–∏–¥–µ—Ä—ã:*\n\n';
        winners.forEach((winner, index) => {
            const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üë§';
            leaderboardText += `${medal} ${winner.name}\n` +
                             `‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: ${Number(winner.average_rating).toFixed(2)}\n` +
                             `üí∞ –ú–æ–Ω–µ—Ç: ${winner.coins || 0}\n` +
                             `${winner.coins_received ? `üíµ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞ –º–µ—Å—Ç–æ: ${winner.coins_received}\n` : ''}` +
                             `\n`;
        });

        await ctx.reply(leaderboardText, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–µ—Ä–æ–≤:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–µ—Ä–æ–≤.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å"
bot.hears('üí∞ –ë–∞–ª–∞–Ω—Å', async (ctx) => {
    try {
        const user = await db.getUserProfile(ctx.from.id);
        if (!user) {
            return ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        }

        const wins = await db.getWinsCount(ctx.from.id);
        const rating = user.average_rating ? Number(user.average_rating).toFixed(2) : '0.00';
        const totalRating = user.total_rating || 0;

        const balanceText = `üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:* ${user.coins || 0} –º–æ–Ω–µ—Ç\n\n` +
            `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
            `üèÜ –ü–æ–±–µ–¥: ${wins}\n` +
            `‚≠êÔ∏è –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${rating}\n` +
            `üìà –°—É–º–º–∞ –≤—Å–µ—Ö –æ—Ü–µ–Ω–æ–∫: ${totalRating}\n\n` +
            `‚ÑπÔ∏è –°–ª–µ–¥—É—é—â–µ–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ ${user.last_win_time ? 
                `–¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ ${getTimeUntilNextRating(user.last_win_time)}` : 
                '–¥–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å'}`;

        await ctx.reply(balanceText, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
bot.hears('üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥', async (ctx) => {
    try {
        const user = await db.getUserProfile(ctx.from.id);
        
        if (!user) {
            return ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        }

        if (user.in_global_rating) {
            return ctx.reply('–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞.');
        }

        if (user.last_global_win && Date.now() - new Date(user.last_global_win).getTime() < 24 * 60 * 60 * 1000) {
            return ctx.reply('–í—ã –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–±–µ–¥–∏–ª–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ. –°–ª–µ–¥—É—é—â–µ–µ —É—á–∞—Å—Ç–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.');
        }

        const joinMessage = `üåç *–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥*\n\n` +
            `–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: 50 –º–æ–Ω–µ—Ç\n` +
            `–ù–∞–≥—Ä–∞–¥—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º:\n` +
            `ü•á 1 –º–µ—Å—Ç–æ: 500 –º–æ–Ω–µ—Ç\n` +
            `ü•à 2 –º–µ—Å—Ç–æ: 300 –º–æ–Ω–µ—Ç\n` +
            `ü•â 3 –º–µ—Å—Ç–æ: 100 –º–æ–Ω–µ—Ç\n\n` +
            `–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.coins} –º–æ–Ω–µ—Ç\n\n` +
            `–ü–æ—Å–ª–µ –ø–æ–±–µ–¥—ã –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω –≤ 0.`;

        await ctx.reply(joinMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [[
                    { text: 'üí´ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', callback_data: 'join_global_rating' },
                    { text: '‚≠êÔ∏è –û—Ü–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—ã', callback_data: 'rate_global_profiles' }
                ]]
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

bot.action('join_global_rating', async (ctx) => {
    try {
        const activeRound = await db.getActiveGlobalRound();
        const participantsCount = await db.getGlobalParticipantsCount();
        
        if (participantsCount >= 10) {
            return ctx.answerCbQuery('‚ùå –ú–µ—Å—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è –±–æ–ª—å—à–µ –Ω–µ—Ç!');
        }

        const result = await db.joinGlobalRating(ctx.from.id);
        
        if (result) {
            await ctx.answerCbQuery('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É!');
            await ctx.reply('–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ!\n' +
                          '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.\n' +
                          '–£–¥–∞—á–∏! üçÄ');
        } else {
            await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è!');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

bot.action('rate_global_profiles', async (ctx) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞—É–Ω–¥ –∏ –ø—Ä–æ—Ñ–∏–ª–∏ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã db
        const activeRound = await db.getActiveGlobalRound();

        if (!activeRound) {
            return ctx.reply('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞.');
        }

        const profile = await db.getNextGlobalProfile(ctx.from.id, activeRound.id);

        if (!profile) {
            return ctx.reply('–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ.');
        }

        await sendGlobalProfileForRating(ctx, profile, activeRound.id);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏
async function sendGlobalProfileForRating(ctx, profile, roundId) {
    try {
        const photos = await db.getUserPhotos(profile.user_id);
        const profileText = `üë§ *${profile.name}*\n` +
            `üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${profile.age}\n` +
            `üåÜ –ì–æ—Ä–æ–¥: ${profile.city}\n` +
            (profile.description ? `üìù –û —Å–µ–±–µ: ${profile.description}\n` : '');

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üëç', callback_data: `global_rate_${profile.user_id}_up_${roundId}` }],
                [{ text: 'üëé', callback_data: `global_rate_${profile.user_id}_down_${roundId}` }],
                [{ text: '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: `global_skip_${profile.user_id}_${roundId}` }]
            ]
        };

        if (photos.length > 0) {
            await ctx.replyWithMediaGroup(photos.map((photoId, index) => ({
                type: 'photo',
                media: photoId,
                ...(index === 0 && { caption: profileText, parse_mode: 'Markdown' })
            })));
            await ctx.reply('–û—Ü–µ–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É:', { reply_markup: keyboard });
        } else {
            await ctx.reply(profileText, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã:', error);
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ –∞–Ω–∫–µ—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ
bot.action(/^global_rate_(\d+)_(up|down)_(\d+)$/, async (ctx) => {
    try {
        const [, candidateId, action, roundId] = ctx.match;
        const rating = action === 'up' ? 10 : 0;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ db
        await db.saveGlobalRating(ctx.from.id, candidateId, rating);

        await ctx.answerCbQuery(`–û—Ü–µ–Ω–∫–∞ ${action === 'up' ? 'üëç' : 'üëé'} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`);

        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ db
        const nextProfile = await db.getNextGlobalProfile(ctx.from.id, roundId);

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
        }

        if (nextProfile) {
            await sendGlobalProfileForRating(ctx, nextProfile, roundId);
        } else {
            await ctx.reply('–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ! üëè');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏.');
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –æ—Ü–µ–Ω–∫—É
async function sendProfileForRating(ctx, profile) {
    const profileText = `üë§ *–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:*\n` +
        `üìù –ò–º—è: ${profile.name}\n` +
        `üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${profile.age}\n` +
        `üåÜ –ì–æ—Ä–æ–¥: ${profile.city}\n` +
        `${profile.description ? `üìÑ –û —Å–µ–±–µ: ${profile.description}\n` : ''}`;

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = profile.user_id; // –ò–∑–º–µ–Ω–µ–Ω–æ —Å profile.telegramId –Ω–∞ profile.user_id

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ü–µ–Ω–∫–∞–º–∏
    const ratingKeyboard = {
        inline_keyboard: [
            [
                { text: '1Ô∏è‚É£', callback_data: `rate_1_${userId}` },
                { text: '2Ô∏è‚É£', callback_data: `rate_2_${userId}` },
                { text: '3Ô∏è‚É£', callback_data: `rate_3_${userId}` },
                { text: '4Ô∏è‚É£', callback_data: `rate_4_${userId}` },
                { text: '5Ô∏è‚É£', callback_data: `rate_5_${userId}` }
            ],
            [
                { text: '6Ô∏è‚É£', callback_data: `rate_6_${userId}` },
                { text: '7Ô∏è‚É£', callback_data: `rate_7_${userId}` },
                { text: '8Ô∏è‚É£', callback_data: `rate_8_${userId}` },
                { text: '9Ô∏è‚É£', callback_data: `rate_9_${userId}` },
                { text: 'üîü', callback_data: `rate_10_${userId}` }
            ],
            [{ text: '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: `skip_${userId}` }]
        ]
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
    if (profile.photos && profile.photos.length > 0) {
        const mediaGroup = profile.photos.map((photoId, index) => ({
            type: 'photo',
            media: photoId,
            ...(index === 0 && { caption: profileText, parse_mode: 'Markdown' })
        }));

        await ctx.replyWithMediaGroup(mediaGroup);
        await ctx.reply('–û—Ü–µ–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É:', { reply_markup: ratingKeyboard });
    } else {
        await ctx.reply(profileText, {
            parse_mode: 'Markdown',
            reply_markup: ratingKeyboard
        });
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ü–µ–Ω–æ–∫
bot.action(/^rate_(\d+)_(\d+)$/, async (ctx) => {
    try {
        const [, rating, targetId] = ctx.match;
        const ratingNum = parseInt(rating);
        const targetIdNum = parseInt(targetId);

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –æ—Ü–µ–Ω–∏–≤–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const targetProfile = await db.getUserProfile(targetIdNum);
        
        try {
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 
            // –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
            const ratingResult = await db.saveRating(targetIdNum, ctx.from.id, ratingNum);
            
            await ctx.answerCbQuery('‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
            
            // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
        } catch (error) {
            if (error.message === '–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è') {
                await ctx.answerCbQuery('‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                return;
            }
            throw error;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
bot.action(/^skip_(\d+)$/, async (ctx) => {
    try {
        await ctx.answerCbQuery();
        const targetId = ctx.match[1]; // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–ø—É—Å–∫–∞–µ–º–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø—É—Å–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.saveSkip(ctx.from.id, targetId);
        
        const nextProfile = await db.getNextProfile(ctx.from.id);
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
        }
        
        if (nextProfile) {
            await sendProfileForRating(ctx, nextProfile);
        } else {
            await ctx.reply('–ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.');
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
function startWinnersUpdate() {
    setInterval(async () => {
        try {
            const winners = await db.updateWinners();
            const winnersList = await db.getCurrentRoundWinners();
            
            if (winnersList && winnersList.length > 0) {
                let message = 'üèÜ *–ò—Ç–æ–≥–∏ —Ä–∞—É–Ω–¥–∞:*\n\n';
                winnersList.forEach((winner, index) => {
                    const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üë§';
                    message += `${medal} ${winner.place}. ${winner.name}\n` +
                              `‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: ${winner.average_rating.toFixed(2)}\n` +
                              `üí∞ –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: ${winner.coins_received}\n\n`;
                });
                
                // TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–ª–∏ –≤ –∫–∞–Ω–∞–ª
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:', error);
        }
    }, 10000);
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
function startGlobalRatingUpdate() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    checkAndUpdateGlobalRating();
    
    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
    setInterval(checkAndUpdateGlobalRating, 60 * 60 * 1000);
}

async function checkAndUpdateGlobalRating() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞—É–Ω–¥
        const activeRound = await pool.query(`
            SELECT * FROM global_rounds 
            WHERE is_active = true
            LIMIT 1
        `);

        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        if (activeRound.rows.length === 0) {
            const now = new Date();
            const registrationEndTime = new Date(now.getTime() + 5 * 60 * 1000); // +5 –º–∏–Ω—É—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            const votingEndTime = new Date(registrationEndTime.getTime() + 5 * 60 * 1000); // +5 –º–∏–Ω—É—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ

            const newRound = await pool.query(`
                INSERT INTO global_rounds (start_time, registration_end_time, voting_end_time, is_active)
                VALUES ($1, $2, $3, true)
                RETURNING *
            `, [now, registrationEndTime, votingEndTime]);

            // –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
            const users = await pool.query('SELECT user_id FROM users');
            for (const user of users.rows) {
                try {
                    await bot.telegram.sendMessage(user.user_id, 
                        'üåü –ù–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞!\n\n' +
                        '–£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.\n' +
                        '–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: 50 –º–æ–Ω–µ—Ç\n\n' +
                        '–ù–∞–≥—Ä–∞–¥—ã:\n' +
                        'ü•á 1 –º–µ—Å—Ç–æ: 500 –º–æ–Ω–µ—Ç\n' +
                        'ü•à 2 –º–µ—Å—Ç–æ: 300 –º–æ–Ω–µ—Ç\n' +
                        'ü•â 3 –º–µ—Å—Ç–æ: 100 –º–æ–Ω–µ—Ç', {
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üí´ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', callback_data: 'join_global_rating' }
                            ]]
                        }
                    });
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error);
                }
            }

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            setTimeout(async () => {
                await startGlobalVoting(newRound.rows[0].id);
            }, 5 * 60 * 1000);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
    }
}

async function startGlobalVoting(roundId) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–∞—É–Ω–¥–∞
        const participants = await pool.query(`
            SELECT u.* FROM users u
            WHERE u.in_global_rating = true
            LIMIT 10
        `);

        if (participants.rows.length < 2) {
            // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ 2, –æ—Ç–º–µ–Ω—è–µ–º —Ä–∞—É–Ω–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–Ω–µ—Ç—ã
            await pool.query(`
                UPDATE users 
                SET coins = coins + 50, in_global_rating = false 
                WHERE in_global_rating = true
            `);
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å
        const voters = await pool.query(`
            SELECT user_id FROM users 
            WHERE (last_global_win IS NULL OR 
                  last_global_win < NOW() - INTERVAL '2 hours')
        `);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–≤—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        for (const voter of voters.rows) {
            try {
                await sendProfileForVoting(voter.user_id, 0, participants.rows, roundId);
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${voter.user_id}:`, error);
            }
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤
        setTimeout(async () => {
            await finishGlobalRating(roundId);
        }, 5 * 60 * 1000);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', error);
    }
}

async function sendProfileForVoting(userId, index, profiles, roundId) {
    const profile = profiles[index];
    const photos = await db.getUserPhotos(profile.user_id);
    
    const keyboard = {
        inline_keyboard: [
            [
                { text: '‚¨ÖÔ∏è', callback_data: `vote_prev_${roundId}_${index}` },
                { text: '‚ú® –í—ã–±—Ä–∞—Ç—å', callback_data: `vote_select_${roundId}_${profile.user_id}` },
                { text: '‚û°Ô∏è', callback_data: `vote_next_${roundId}_${index}` }
            ]
        ]
    };

    const caption = `üë§ *${profile.name}*, ${profile.age}\n` +
                   `üåÜ ${profile.city}\n` +
                   `${profile.description ? `üìù ${profile.description}\n` : ''}` +
                   `\n${index + 1}/${profiles.length}`;

    if (photos.length > 0) {
        await bot.telegram.sendPhoto(userId, photos[0], {
            caption: caption,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    } else {
        await bot.telegram.sendMessage(userId, caption, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    startWinnersUpdate();
    startGlobalRatingUpdate(); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
}).catch((err) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–∏—è
function getTimeUntilNextRating(lastWinTime) {
    const nextAvailableTime = new Date(lastWinTime);
    nextAvailableTime.setHours(nextAvailableTime.getHours() + 2);
    
    const now = new Date();
    const diff = nextAvailableTime - now;
    
    if (diff <= 0) return '—Å–µ–π—á–∞—Å';
    
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    
    return `${hours}—á ${minutes}–º`;
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
bot.action('edit_profile', async (ctx) => {
    await ctx.scene.enter('edit_profile');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—Ç–æ –º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª"
bot.hears('‚≠êÔ∏è –ö—Ç–æ –º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª', async (ctx) => {
    try {
        const ratings = await db.getLastRatings(ctx.from.id);
        
        if (!ratings || ratings.length === 0) {
            return ctx.reply('–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ü–µ–Ω–∏–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.');
        }

        let message = 'üåü *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:*\n\n';
        
        for (const rating of ratings) {
            const raterProfile = await db.getUserProfile(rating.from_user_id);
            if (raterProfile) {
                message += `üë§ *${raterProfile.name}*, ${raterProfile.age} –ª–µ—Ç\n` +
                          `üåÜ ${raterProfile.city}\n` +
                          `‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞: ${rating.rating}/10\n` +
                          `üïê ${formatDate(rating.created_at)}\n`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º username –µ—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –≤—ã—Å–æ–∫–∞—è
                if (rating.rating >= 7 && raterProfile.username) {
                    message += `üì± @${raterProfile.username}\n`;
                }
                message += '\n';
            }
        }

        await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ü–µ–Ω–æ–∫.');
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(date) {
    const d = new Date(date);
    return d.toLocaleString('ru-RU', { 
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

async function sendVotingMessage(userId, candidates, currentIndex) {
    if (!candidates || candidates.length === 0) {
        return bot.telegram.sendMessage(userId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.');
    }

    const candidate = candidates[currentIndex];
    const photos = candidate.photos || [];
    const caption = `üë§ *${candidate.name}*, ${candidate.age} –ª–µ—Ç\n` +
                   `üåÜ ${candidate.city}\n` +
                   `üìù ${candidate.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n` +
                   `‚≠êÔ∏è –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${Number(candidate.global_rating).toFixed(2)}\n\n` +
                   `–ö–∞–Ω–¥–∏–¥–∞—Ç ${currentIndex + 1} –∏–∑ ${candidates.length}`;

    const keyboard = {
        inline_keyboard: [
            [
                currentIndex > 0 ? 
                    { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data: `vote_prev_${currentIndex}` } : 
                    { text: '‚¨ÖÔ∏è', callback_data: 'noop' },
                { text: '‚úÖ –í—ã–±—Ä–∞—Ç—å', callback_data: `vote_select_${candidate.user_id}` },
                currentIndex < candidates.length - 1 ? 
                    { text: '–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è', callback_data: `vote_next_${currentIndex}` } : 
                    { text: '‚û°Ô∏è', callback_data: 'noop' }
            ]
        ]
    };

    if (photos.length > 0) {
        await bot.telegram.sendPhoto(userId, photos[0], {
            caption: caption,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    } else {
        await bot.telegram.sendMessage(userId, caption, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
bot.action(/^vote_(prev|next)_(\d+)_(\d+)$/, async (ctx) => {
    try {
        const [, direction, roundId, currentIndex] = ctx.match;
        const participants = await pool.query(`
            SELECT u.* FROM users u
            WHERE u.in_global_rating = true
            ORDER BY u.user_id
        `);

        let newIndex = parseInt(currentIndex);
        if (direction === 'next') {
            newIndex = (newIndex + 1) % participants.rows.length;
        } else {
            newIndex = (newIndex - 1 + participants.rows.length) % participants.rows.length;
        }

        await ctx.deleteMessage();
        await sendProfileForVoting(ctx.from.id, newIndex, participants.rows, roundId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
bot.action(/^vote_select_(\d+)_(\d+)$/, async (ctx) => {
    try {
        const [, roundId, selectedUserId] = ctx.match;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å
        await pool.query(`
            INSERT INTO global_votes (round_id, voter_id, candidate_id)
            VALUES ($1, $2, $3)
            ON CONFLICT (round_id, voter_id) DO UPDATE
            SET candidate_id = $3
        `, [roundId, ctx.from.id, selectedUserId]);

        await ctx.answerCbQuery('‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!');
        await ctx.deleteMessage();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

async function finishGlobalRating(roundId) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Å—Ä–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫
        const results = await pool.query(`
            SELECT 
                u.user_id,
                u.name,
                COALESCE(AVG(gv.rating), 0) as average_rating,
                COUNT(DISTINCT gv.voter_id) as total_votes
            FROM users u
            LEFT JOIN global_votes gv ON u.user_id = gv.candidate_id
            WHERE u.in_global_rating = true
            AND gv.round_id = $1
            GROUP BY u.user_id, u.name
            ORDER BY average_rating DESC, total_votes DESC
        `, [roundId]);

        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        const rewards = [500, 300, 100];
        for (let i = 0; i < Math.min(results.rows.length, rewards.length); i++) {
            const winner = results.rows[i];
            await pool.query(`
                UPDATE users
                SET coins = coins + $1,
                    last_global_win = CURRENT_TIMESTAMP
                WHERE user_id = $2
            `, [rewards[i], winner.user_id]);
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É—á–∞—Å—Ç–∏—è —É –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        await pool.query(`
            UPDATE users
            SET in_global_rating = false
            WHERE in_global_rating = true
        `);

        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥
        await pool.query(`
            UPDATE global_rounds
            SET is_active = false
            WHERE id = $1
        `, [roundId]);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        const participants = await pool.query(`
            SELECT DISTINCT user_id 
            FROM users 
            WHERE user_id IN (SELECT voter_id FROM global_votes WHERE round_id = $1)
        `, [roundId]);

        let message = 'üèÜ *–ò—Ç–æ–≥–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:*\n\n';
        results.rows.forEach((result, index) => {
            const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üë§';
            message += `${medal} ${result.name}\n` +
                      `‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${result.average_rating.toFixed(2)}\n` +
                      `üë• –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: ${result.total_votes}\n`;
            if (index < 3) {
                message += `üí∞ +${rewards[index]} –º–æ–Ω–µ—Ç\n`;
            }
            message += '\n';
        });

        for (const participant of participants.rows) {
            try {
                await bot.telegram.sendMessage(participant.user_id, message, {
                    parse_mode: 'Markdown'
                });
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${participant.user_id}:`, error);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—É–Ω–¥–∞:', error);
    }
}

async function saveGlobalRating(fromUserId, toUserId, rating) {
    try {
        // Validate rating
        const parsedRating = parseInt(rating);
        if (isNaN(parsedRating) || parsedRating < 1 || parsedRating > 10) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞. –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10');
        }

        // Validate users exist
        const [voter, candidate] = await Promise.all([
            pool.query('SELECT * FROM users WHERE user_id = $1', [fromUserId]),
            pool.query('SELECT * FROM users WHERE user_id = $1', [toUserId])
        ]);

        if (!voter.rows.length || !candidate.rows.length) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // Check if user is voting for themselves
        if (fromUserId === toUserId) {
            throw new Error('–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è');
        }

        // Check if already rated
        const existingRating = await pool.query(`
            SELECT * FROM global_ratings 
            WHERE from_user_id = $1 AND to_user_id = $2
        `, [fromUserId, toUserId]);

        if (existingRating.rows.length > 0) {
            throw new Error('–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }

        // Save rating
        await pool.query(`
            INSERT INTO global_ratings (from_user_id, to_user_id, rating)
            VALUES ($1, $2, $3)
        `, [fromUserId, toUserId, rating]);

    } catch (error) {
        throw error;
    }
}
